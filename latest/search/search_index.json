{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Drush is a command line shell and Unix scripting interface for Drupal. Drush core ships with lots of useful commands for interacting with code like modules/themes/profiles. Similarly, it runs update.php, executes SQL queries and DB migrations, and misc utilities like run cron or clear cache. Developers love the generate command , which jump starts your coding project by writing ready-to-customize PHP and YML files. Drush can be extended by 3rd party commandfiles . Resources \u00b6 Installing and Upgrading ( Drush 8 ) Usage ( Drush 8 ) Drush Commands API Documentation Drush packages available via Composer A list of modules that include Drush integration Drush comes with a full test suite powered by PHPUnit . Each commit gets tested by our CI bots . Support \u00b6 Post support requests to Drupal Answers . Tag question with drush . Report bugs and request features in the GitHub Drush Issue Queue . Use pull requests (PRs) to contribute to Drush. Guidelines . Code of Conduct \u00b6 The Drush project expects all participants to abide by the Drupal Code of Conduct . FAQ \u00b6 What does Drush stand for? \u00b6 A: The Drupal Shell. How do I pronounce Drush? \u00b6 Some people pronounce the dru with a long 'u' like Dr u pal. Fidelity points go to them, but they are in the minority. Most pronounce Drush so that it rhymes with hush, rush, flush, etc. This is the preferred pronunciation. Credits \u00b6 Maintained by Moshe Weitzman with much help from the folks listed at https://github.com/orgs/drush-ops/people . Originally developed by Arto Bendiken for Drupal 4.7. Redesigned by Franz Heinzmann in May 2007 for Drupal 5. Thanks to JetBrains for supporting this project and open source software .","title":"Introduction"},{"location":"#resources","text":"Installing and Upgrading ( Drush 8 ) Usage ( Drush 8 ) Drush Commands API Documentation Drush packages available via Composer A list of modules that include Drush integration Drush comes with a full test suite powered by PHPUnit . Each commit gets tested by our CI bots .","title":"Resources"},{"location":"#support","text":"Post support requests to Drupal Answers . Tag question with drush . Report bugs and request features in the GitHub Drush Issue Queue . Use pull requests (PRs) to contribute to Drush. Guidelines .","title":"Support"},{"location":"#code-of-conduct","text":"The Drush project expects all participants to abide by the Drupal Code of Conduct .","title":"Code of Conduct"},{"location":"#faq","text":"","title":"FAQ"},{"location":"#what-does-drush-stand-for","text":"A: The Drupal Shell.","title":"What does Drush stand for?"},{"location":"#how-do-i-pronounce-drush","text":"Some people pronounce the dru with a long 'u' like Dr u pal. Fidelity points go to them, but they are in the minority. Most pronounce Drush so that it rhymes with hush, rush, flush, etc. This is the preferred pronunciation.","title":"How do I pronounce Drush?"},{"location":"#credits","text":"Maintained by Moshe Weitzman with much help from the folks listed at https://github.com/orgs/drush-ops/people . Originally developed by Arto Bendiken for Drupal 4.7. Redesigned by Franz Heinzmann in May 2007 for Drupal 5. Thanks to JetBrains for supporting this project and open source software .","title":"Credits"},{"location":"bootstrap/","text":"The Drush Bootstrap Process \u00b6 When preparing to run a command, Drush works by bootstrapping the Drupal environment in very much the same way that is done during a normal page request from the web server, so most Drush commands run in the context of a fully-initialized website. For efficiency and convenience, some Drush commands can work without first bootstrapping a Drupal site, or by only partially bootstrapping a site. This is faster than a full bootstrap. It is also a matter of convenience, because some commands are useful even when you don't have a working Drupal site. Commands may specify their bootstrap level with a @bootstrap annotation. Commands supplied by Drupal modules are always @bootstrap full . Prior to bootstrapping, Drush goes through the preflight process, where the following things occur: Preflight Commandline arguments are parsed. Configuration files are read. The site-alias included on the commandline is loaded if present. The local selected site is determined, if any. Dependency injection is done. Global commandfiles are loaded. Commandfiles with a drush.services.yml are loaded later, during bootstrap @full . The command is dispatched via the Symfony Console component. Bootstrapping is done from a Symfony Console command hook. The different bootstrap levels are discribed below. @bootstrap none \u00b6 Only run Drush preflight , without considering Drupal at all. Any code that operates on the Drush installation, and not specifically any Drupal directory, should bootstrap to this phase. @bootstrap root \u00b6 Set up and test for a valid Drupal root, either through the --root options, or evaluated based on the current working directory. Any code that interacts with an entire Drupal installation, and not a specific site on the Drupal installation should use this bootstrap phase. @bootstrap site \u00b6 Set up a Drupal site directory and the correct environment variables to allow Drupal to find the configuration file. If no site is specified with the --uri options, Drush will assume the site is 'default', which mimics Drupal's behaviour. Note that it is necessary to specify a full URI, e.g. --uri= http://example.com , in order for certain Drush commands and Drupal modules to behave correctly. See the Drush configuration for more information. Any code that needs to modify or interact with a specific Drupal site's settings.php file should bootstrap to this phase. @bootstrap configuration \u00b6 Load the settings from the Drupal sites directory. This phase is analogous to the DRUPAL_BOOTSTRAP_CONFIGURATION bootstrap phase in Drupal itself, and this is also the first step where Drupal specific code is included. This phase is commonly used for code that interacts with the Drupal install API, as both install.php and update.php start at this phase. @bootstrap database \u00b6 Connect to the Drupal database using the database credentials loaded during the previous bootstrap phase. This phase is analogous to the DRUPAL_BOOTSTRAP_DATABASE bootstrap phase in Drupal. Any code that needs to interact with the Drupal database API needs to be bootstrapped to at least this phase. @bootstrap full \u00b6 Fully initialize Drupal. This is analogous to the DRUPAL_BOOTSTRAP_FULL bootstrap phase in Drupal. Any code that interacts with the general Drupal API should be bootstrapped to this phase. @bootstrap max \u00b6 This is not an actual bootstrap phase. Commands that use the \"max\" bootstrap level will cause Drush to bootstrap as far as possible, and then run the command regardless of the bootstrap phase that was reached. This is useful for Drush commands that work without a bootstrapped site, but that provide additional information or capabilities in the presence of a bootstrapped site. For example, drush status will show progressively more information the farther the site bootstraps.","title":"Bootstrap"},{"location":"bootstrap/#the-drush-bootstrap-process","text":"When preparing to run a command, Drush works by bootstrapping the Drupal environment in very much the same way that is done during a normal page request from the web server, so most Drush commands run in the context of a fully-initialized website. For efficiency and convenience, some Drush commands can work without first bootstrapping a Drupal site, or by only partially bootstrapping a site. This is faster than a full bootstrap. It is also a matter of convenience, because some commands are useful even when you don't have a working Drupal site. Commands may specify their bootstrap level with a @bootstrap annotation. Commands supplied by Drupal modules are always @bootstrap full . Prior to bootstrapping, Drush goes through the preflight process, where the following things occur: Preflight Commandline arguments are parsed. Configuration files are read. The site-alias included on the commandline is loaded if present. The local selected site is determined, if any. Dependency injection is done. Global commandfiles are loaded. Commandfiles with a drush.services.yml are loaded later, during bootstrap @full . The command is dispatched via the Symfony Console component. Bootstrapping is done from a Symfony Console command hook. The different bootstrap levels are discribed below.","title":"The Drush Bootstrap Process"},{"location":"bootstrap/#bootstrap-none","text":"Only run Drush preflight , without considering Drupal at all. Any code that operates on the Drush installation, and not specifically any Drupal directory, should bootstrap to this phase.","title":"@bootstrap none"},{"location":"bootstrap/#bootstrap-root","text":"Set up and test for a valid Drupal root, either through the --root options, or evaluated based on the current working directory. Any code that interacts with an entire Drupal installation, and not a specific site on the Drupal installation should use this bootstrap phase.","title":"@bootstrap root"},{"location":"bootstrap/#bootstrap-site","text":"Set up a Drupal site directory and the correct environment variables to allow Drupal to find the configuration file. If no site is specified with the --uri options, Drush will assume the site is 'default', which mimics Drupal's behaviour. Note that it is necessary to specify a full URI, e.g. --uri= http://example.com , in order for certain Drush commands and Drupal modules to behave correctly. See the Drush configuration for more information. Any code that needs to modify or interact with a specific Drupal site's settings.php file should bootstrap to this phase.","title":"@bootstrap site"},{"location":"bootstrap/#bootstrap-configuration","text":"Load the settings from the Drupal sites directory. This phase is analogous to the DRUPAL_BOOTSTRAP_CONFIGURATION bootstrap phase in Drupal itself, and this is also the first step where Drupal specific code is included. This phase is commonly used for code that interacts with the Drupal install API, as both install.php and update.php start at this phase.","title":"@bootstrap configuration"},{"location":"bootstrap/#bootstrap-database","text":"Connect to the Drupal database using the database credentials loaded during the previous bootstrap phase. This phase is analogous to the DRUPAL_BOOTSTRAP_DATABASE bootstrap phase in Drupal. Any code that needs to interact with the Drupal database API needs to be bootstrapped to at least this phase.","title":"@bootstrap database"},{"location":"bootstrap/#bootstrap-full","text":"Fully initialize Drupal. This is analogous to the DRUPAL_BOOTSTRAP_FULL bootstrap phase in Drupal. Any code that interacts with the general Drupal API should be bootstrapped to this phase.","title":"@bootstrap full"},{"location":"bootstrap/#bootstrap-max","text":"This is not an actual bootstrap phase. Commands that use the \"max\" bootstrap level will cause Drush to bootstrap as far as possible, and then run the command regardless of the bootstrap phase that was reached. This is useful for Drush commands that work without a bootstrapped site, but that provide additional information or capabilities in the presence of a bootstrapped site. For example, drush status will show progressively more information the farther the site bootstraps.","title":"@bootstrap max"},{"location":"commands/","text":"Creating Custom Drush Commands \u00b6 Creating a new Drush command or porting a legacy command is easy. Follow the steps below. Run drush generate drush-command-file . Drush will prompt for the machine name of the module that should \"own\" the file. (optional) Drush will also prompt for the path to a legacy command file to port. See tips on porting commands to Drush 10 The module selected must already exist and be enabled. Use drush generate module-standard to create a new module. Drush will then report that it created a commandfile, a drush.services.yml file and a composer.json file. Edit those files as needed. Use the classes for the core Drush commands at /src/Drupal/Commands as inspiration and documentation. See the dependency injection docs for interfaces you can implement to gain access to Drush config, Drupal site aliases, etc. A commandfile that will only be used on PHP8+ can use Attributes instead of Annotations. Write PHPUnit tests based on Drush Test Traits . Once your two files are ready, run drush cr to get your command recognized by the Drupal container. Specifying the Services File \u00b6 A module's composer.json file stipulates the filename where the Drush services (e.g. the Drush command files) are defined. The default services file is drush.services.yml , which is defined in the extra section of the composer.json file as follows: \"extra\" : { \"drush\" : { \"services\" : { \"drush.services.yml\" : \"^9\" } } } If for some reason you need to load different services for different versions of Drush, simply define multiple services files in the services section. The first one found will be used. For example: \"extra\" : { \"drush\" : { \"services\" : { \"drush-9-99.services.yml\" : \"^9.99\" , \"drush.services.yml\" : \"^9\" } } } In this example, the file drush-9-99.services.yml loads commandfile classes that require features only available in Drush 9.99 and later, and drush.services.yml loads an older commandfile implementation for earlier versions of Drush. It is also possible to use version ranges to exactly specify which version of Drush the services file should be used with (e.g. \"drush.services.yml\": \">=9 <9.99\" ). In Drush 9, the default services file, drush.services.yml , will be used in instances where there is no services section in the Drush extras of the project's composer.json file. In Drush 10, however, the services section must exist, and must name the services file to be used. If a future Drush extension is written such that it only works with Drush 10 and later, then its entry would read \"drush.services.yml\": \"^10\" , and Drush 9 would not load the extension's commands. It is all the same recommended that Drush 9 extensions explicitly declare their services file with an appropriate version constraint. Altering Drush Command Info \u00b6 Drush command info (annotations/attributes) can be altered from other modules. This is done by creating and registering 'command info alterers'. Alterers are class services that are able to intercept and manipulate an existing command annotation. In order to alter an existing command info, follow the steps below: In the module that wants to alter a command info, add a service class that implements the \\Consolidation\\AnnotatedCommand\\CommandInfoAltererInterface . In the module drush.services.yml declare a service pointing to this class and tag the service with the drush.command_info_alterer tag. In that class, implement the alteration logic in the alterCommandInfo() method. Along with the alter code, it's strongly recommended to log a debug message explaining what exactly was altered. This makes things easier on others who may need to debug the interaction of the alter code with other modules. Also it's a good practice to inject the the logger in the class constructor. For an example, see the alterer class provided by the testing 'woot' module: tests/functional/resources/modules/d8/woot/src/WootCommandInfoAlterer.php . Symfony Console Commands \u00b6 Drush lists and runs Symfony Console commands, in addition to more typical annotated commands. See this test and this commandfile . Site-Wide Drush Commands \u00b6 Commandfiles that are installed in a Drupal site and are not bundled inside a Drupal module are called 'site-wide' commandfiles. Site-wide commands may either be added directly to the Drupal site's repository (e.g. for site-specific policy files), or via composer require . See the examples/Commands folder for examples. In general, it's better to use modules to carry your Drush commands, as module-based commands may participate in Drupal's dependency injection via the drush.services.yml . If you still prefer using site-wide commandfiles, here are some examples of valid commandfile names and namespaces: Simple Filename: $PROJECT_ROOT/drush/Commands/ExampleCommands.php Namespace: Drush\\Commands Nested in a subdirectory committed to the site's repository Filename: $PROJECT_ROOT/drush/Commands/example/ExampleCommands.php Namespace: Drush\\Commands\\example Nested in a subdirectory installed via a Composer package Filename: $PROJECT_ROOT/drush/Commands/contrib/dev_modules/ExampleCommands.php Namespace: Drush\\Commands\\dev_modules Note: Make sure you do not include src in the path to your command. Your command may not be discovered and have additional problems. Installing commands as part of a Composer project requires that the project's type be drupal-drush , and that the installer-paths in the Drupal site's composer.json file contains \"drush/Commands/contrib/{$name}\": [\"type:drupal-drush\"] . It is also possible to commit projects with a similar layout using a directory named custom in place of contrib ; if this is done, then the directory custom will not be considered to be part of the commandfile's namespace. If a site-wide commandfile is added via a Composer package, then it may declare any dependencies that it may need in its composer.json file. Site-wide commandfiles that are committed directly to a site's repository only have access to the dependencies already available in the site. Site-wide commandfiles should declare their Drush version compatibility via a conflict directive. For example, a Composer-managed site-wide command that works with both Drush 8 and Drush 9 might contain something similar to the following in its composer.json file: \"conflict\" : { \"drush/drush\" : \"<8.2 || >=9.0 <9.6 || >=10.0\" , } Using require in place of conflict is not recommended. A site-wide commandfile should have tests that run with each (major) version of Drush that is supported. You may model your test suite after the example drush extension project, which works on Drush ^8.2 and ^9.6. Global Drush Commands \u00b6 Commandfiles that are not part of any Drupal site are called 'global' commandfiles. Commands discovered by configuration \u00b6 Global commandfiles discoverable by configuration are not supported by default; in order to enable them, you must configure your drush.yml configuration file to add an include search location. For example: drush : paths : include : - '${env.home}/.drush/commands' With this configuration in place, global commands may be placed as described in the Site-Wide Drush Commands section above. Global commandfiles may not declare any dependencies of their own; they may only use those dependencies already available via the autoloader. Tip The filename must be have a name like Commands/ExampleCommands.php The prefix Example can be whatever string you want. The file must end in Commands.php The directory above Commands must be one of: A Folder listed in the 'include' option. Include may be provided via config or via CLI. ../drush, /drush or /sites/all/drush. These paths are relative to Drupal root. It is recommended that you avoid global Drush commands, and favor site-wide commandfiles instead. If you really need a command or commands that are not part of any Drupal site, consider making a stand-alone script or custom .phar instead. See ahoy , Robo and g1a/starter as potential starting points. Symlinked packages While it is good practice to make your custom commands into a Composer package, please beware that symlinked packages (by using the composer repository type Path ) will not be discovered by Drush. When in development, it is recommended to specify your package's path in your drush.yml to have quick access to your commands. Auto-discovered commands \u00b6 Note : Global commands auto-discovery is experimental until Drush 10.5.0. Such commands are auto-discovered by their class PSR4 namespace and class/file name suffix. Drush will auto-discover commands if: The commands class is PSR4 auto-loadable. The commands class namespace, relative to base namespace, is Drush\\Commands . For instance, if a Drush command provider third party library maps this PSR4 autoload entry: \"autoload\" : { \"psr-4\" : { \"My\\\\Custom\\\\Library\\\\\" : \"src\" } } then the Drush global commands class namespace should be My\\Custom\\Library\\Drush\\Commands and the class file should be located under the src/Drush/Commands directory. The class and file name ends with *DrushCommands , e.g. FooDrushCommands .","title":"Command Authoring"},{"location":"commands/#creating-custom-drush-commands","text":"Creating a new Drush command or porting a legacy command is easy. Follow the steps below. Run drush generate drush-command-file . Drush will prompt for the machine name of the module that should \"own\" the file. (optional) Drush will also prompt for the path to a legacy command file to port. See tips on porting commands to Drush 10 The module selected must already exist and be enabled. Use drush generate module-standard to create a new module. Drush will then report that it created a commandfile, a drush.services.yml file and a composer.json file. Edit those files as needed. Use the classes for the core Drush commands at /src/Drupal/Commands as inspiration and documentation. See the dependency injection docs for interfaces you can implement to gain access to Drush config, Drupal site aliases, etc. A commandfile that will only be used on PHP8+ can use Attributes instead of Annotations. Write PHPUnit tests based on Drush Test Traits . Once your two files are ready, run drush cr to get your command recognized by the Drupal container.","title":"Creating Custom Drush Commands"},{"location":"commands/#specifying-the-services-file","text":"A module's composer.json file stipulates the filename where the Drush services (e.g. the Drush command files) are defined. The default services file is drush.services.yml , which is defined in the extra section of the composer.json file as follows: \"extra\" : { \"drush\" : { \"services\" : { \"drush.services.yml\" : \"^9\" } } } If for some reason you need to load different services for different versions of Drush, simply define multiple services files in the services section. The first one found will be used. For example: \"extra\" : { \"drush\" : { \"services\" : { \"drush-9-99.services.yml\" : \"^9.99\" , \"drush.services.yml\" : \"^9\" } } } In this example, the file drush-9-99.services.yml loads commandfile classes that require features only available in Drush 9.99 and later, and drush.services.yml loads an older commandfile implementation for earlier versions of Drush. It is also possible to use version ranges to exactly specify which version of Drush the services file should be used with (e.g. \"drush.services.yml\": \">=9 <9.99\" ). In Drush 9, the default services file, drush.services.yml , will be used in instances where there is no services section in the Drush extras of the project's composer.json file. In Drush 10, however, the services section must exist, and must name the services file to be used. If a future Drush extension is written such that it only works with Drush 10 and later, then its entry would read \"drush.services.yml\": \"^10\" , and Drush 9 would not load the extension's commands. It is all the same recommended that Drush 9 extensions explicitly declare their services file with an appropriate version constraint.","title":"Specifying the Services File"},{"location":"commands/#altering-drush-command-info","text":"Drush command info (annotations/attributes) can be altered from other modules. This is done by creating and registering 'command info alterers'. Alterers are class services that are able to intercept and manipulate an existing command annotation. In order to alter an existing command info, follow the steps below: In the module that wants to alter a command info, add a service class that implements the \\Consolidation\\AnnotatedCommand\\CommandInfoAltererInterface . In the module drush.services.yml declare a service pointing to this class and tag the service with the drush.command_info_alterer tag. In that class, implement the alteration logic in the alterCommandInfo() method. Along with the alter code, it's strongly recommended to log a debug message explaining what exactly was altered. This makes things easier on others who may need to debug the interaction of the alter code with other modules. Also it's a good practice to inject the the logger in the class constructor. For an example, see the alterer class provided by the testing 'woot' module: tests/functional/resources/modules/d8/woot/src/WootCommandInfoAlterer.php .","title":"Altering Drush Command Info"},{"location":"commands/#symfony-console-commands","text":"Drush lists and runs Symfony Console commands, in addition to more typical annotated commands. See this test and this commandfile .","title":"Symfony Console Commands"},{"location":"commands/#site-wide-drush-commands","text":"Commandfiles that are installed in a Drupal site and are not bundled inside a Drupal module are called 'site-wide' commandfiles. Site-wide commands may either be added directly to the Drupal site's repository (e.g. for site-specific policy files), or via composer require . See the examples/Commands folder for examples. In general, it's better to use modules to carry your Drush commands, as module-based commands may participate in Drupal's dependency injection via the drush.services.yml . If you still prefer using site-wide commandfiles, here are some examples of valid commandfile names and namespaces: Simple Filename: $PROJECT_ROOT/drush/Commands/ExampleCommands.php Namespace: Drush\\Commands Nested in a subdirectory committed to the site's repository Filename: $PROJECT_ROOT/drush/Commands/example/ExampleCommands.php Namespace: Drush\\Commands\\example Nested in a subdirectory installed via a Composer package Filename: $PROJECT_ROOT/drush/Commands/contrib/dev_modules/ExampleCommands.php Namespace: Drush\\Commands\\dev_modules Note: Make sure you do not include src in the path to your command. Your command may not be discovered and have additional problems. Installing commands as part of a Composer project requires that the project's type be drupal-drush , and that the installer-paths in the Drupal site's composer.json file contains \"drush/Commands/contrib/{$name}\": [\"type:drupal-drush\"] . It is also possible to commit projects with a similar layout using a directory named custom in place of contrib ; if this is done, then the directory custom will not be considered to be part of the commandfile's namespace. If a site-wide commandfile is added via a Composer package, then it may declare any dependencies that it may need in its composer.json file. Site-wide commandfiles that are committed directly to a site's repository only have access to the dependencies already available in the site. Site-wide commandfiles should declare their Drush version compatibility via a conflict directive. For example, a Composer-managed site-wide command that works with both Drush 8 and Drush 9 might contain something similar to the following in its composer.json file: \"conflict\" : { \"drush/drush\" : \"<8.2 || >=9.0 <9.6 || >=10.0\" , } Using require in place of conflict is not recommended. A site-wide commandfile should have tests that run with each (major) version of Drush that is supported. You may model your test suite after the example drush extension project, which works on Drush ^8.2 and ^9.6.","title":"Site-Wide Drush Commands"},{"location":"commands/#global-drush-commands","text":"Commandfiles that are not part of any Drupal site are called 'global' commandfiles.","title":"Global Drush Commands"},{"location":"commands/#commands-discovered-by-configuration","text":"Global commandfiles discoverable by configuration are not supported by default; in order to enable them, you must configure your drush.yml configuration file to add an include search location. For example: drush : paths : include : - '${env.home}/.drush/commands' With this configuration in place, global commands may be placed as described in the Site-Wide Drush Commands section above. Global commandfiles may not declare any dependencies of their own; they may only use those dependencies already available via the autoloader. Tip The filename must be have a name like Commands/ExampleCommands.php The prefix Example can be whatever string you want. The file must end in Commands.php The directory above Commands must be one of: A Folder listed in the 'include' option. Include may be provided via config or via CLI. ../drush, /drush or /sites/all/drush. These paths are relative to Drupal root. It is recommended that you avoid global Drush commands, and favor site-wide commandfiles instead. If you really need a command or commands that are not part of any Drupal site, consider making a stand-alone script or custom .phar instead. See ahoy , Robo and g1a/starter as potential starting points. Symlinked packages While it is good practice to make your custom commands into a Composer package, please beware that symlinked packages (by using the composer repository type Path ) will not be discovered by Drush. When in development, it is recommended to specify your package's path in your drush.yml to have quick access to your commands.","title":"Commands discovered by configuration"},{"location":"commands/#auto-discovered-commands","text":"Note : Global commands auto-discovery is experimental until Drush 10.5.0. Such commands are auto-discovered by their class PSR4 namespace and class/file name suffix. Drush will auto-discover commands if: The commands class is PSR4 auto-loadable. The commands class namespace, relative to base namespace, is Drush\\Commands . For instance, if a Drush command provider third party library maps this PSR4 autoload entry: \"autoload\" : { \"psr-4\" : { \"My\\\\Custom\\\\Library\\\\\" : \"src\" } } then the Drush global commands class namespace should be My\\Custom\\Library\\Drush\\Commands and the class file should be located under the src/Drush/Commands directory. The class and file name ends with *DrushCommands , e.g. FooDrushCommands .","title":"Auto-discovered commands"},{"location":"config-exporting/","text":"Exporting and Importing Configuration \u00b6 Drush provides commands to export , pull , and import Drupal configuration files. Simple - value changes \u00b6 It is not necessary to alter configuration values to make simple value changes to configuration variables, as this may be done by the configuration override system . The configuration override system allows you to change configuration values for a given instance of a site (e.g. the development server) by setting configuration variables in the site's settings.php file. For example, to change the name of a local development site: $config [ 'system.site' ][ 'name' ] = 'Local Install of Awesome Widgets, Inc.' ; Note that the configuration override system is a Drupal feature, not a Drush feature. It should be the preferred method for changing configuration values on a per-environment basis; however, it does not work for some things, such as enabling and disabling modules. Advanced - variation by environment \u00b6 As of Drupal 8.8, Drupal supports excluding development modules from enabling on higher environments . See Config Split module for more advanced needs.","title":"Drupal configuration"},{"location":"config-exporting/#exporting-and-importing-configuration","text":"Drush provides commands to export , pull , and import Drupal configuration files.","title":"Exporting and Importing Configuration"},{"location":"config-exporting/#simple-value-changes","text":"It is not necessary to alter configuration values to make simple value changes to configuration variables, as this may be done by the configuration override system . The configuration override system allows you to change configuration values for a given instance of a site (e.g. the development server) by setting configuration variables in the site's settings.php file. For example, to change the name of a local development site: $config [ 'system.site' ][ 'name' ] = 'Local Install of Awesome Widgets, Inc.' ; Note that the configuration override system is a Drupal feature, not a Drush feature. It should be the preferred method for changing configuration values on a per-environment basis; however, it does not work for some things, such as enabling and disabling modules.","title":"Simple - value changes"},{"location":"config-exporting/#advanced-variation-by-environment","text":"As of Drupal 8.8, Drupal supports excluding development modules from enabling on higher environments . See Config Split module for more advanced needs.","title":"Advanced - variation by environment"},{"location":"cron/","text":"Running Drupal cron tasks from Drush \u00b6 Drupal cron tasks are often set up to be run via a wget call to cron.php; this same task can also be accomplished via the cron command , which circumvents the need to provide a web server interface to cron. Quick start \u00b6 If you just want to get started quickly, here is a crontab entry that will run cron once every hour at ten minutes after the hour: 10 * * * * cd [DOCROOT] && /usr/bin/env PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin COLUMNS=72 ../vendor/bin/drush --uri=your.drupalsite.org --quiet cron You should set up crontab to run your cron tasks as the same user that runs the web server; for example, if you run your web server as the user www-data: sudo crontab -u www-data -e You might need to edit the crontab entry shown above slightly for your particular setup; for example, if you have installed Drush to some directory other than /usr/local/drush, then you will need to adjust the path to drush appropriately. We'll break down the meaning of each section of the crontab entry in the documentation that continues below. Setting the schedule \u00b6 See man 5 crontab for information on how to format the information in a crontab entry. In the example above, the schedule for the crontab is set by the string 10 * * * * . These fields are the minute, hour, day of month, month and day of week; * means essentially 'all values', so 10 * * * * will run any time the minute == 10 (once every hour). Setting the PATH \u00b6 We use /usr/bin/env to run Drush so that we can set up some necessary environment variables that Drush needs to execute. By default, cron will run each command with an empty PATH, which would not work well with Drush. To find out what your PATH needs to be, just type: echo $PATH Take the value that is output and place it into your crontab entry in the place of the one shown above. You can remove any entry that is known to not be of interest to Drush (e.g. /usr/games), or is only useful in a graphic environment (e.g. /usr/X11/bin). Setting COLUMNS \u00b6 When running Drush in a terminal, the number of columns will be automatically determined by Drush by way of the tput command, which queries the active terminal to determine what the width of the screen is. When running Drush from cron, there will not be any terminal set, and the call to tput will produce an error message. Spurious error messages are undesirable, as cron is often configured to send email whenever any output is produced, so it is important to make an effort to insure that successful runs of cron complete with no output. In some cases, Drush is smart enough to recognize that there is no terminal -- if the terminal value is empty or \"dumb\", for example. However, there are some \"non-terminal\" values that Drush does not recognize, such as \"unknown.\" If you manually set COLUMNS , then Drush will respect your setting and will not attempt to call tput. Using --quiet \u00b6 By default, Drush will print a success message when the run of cron is completed. The --quiet flag will suppress these and other progress messages, again avoiding an unnecessary email message. Specifying the Drupal site to run \u00b6 There are many ways to tell Drush which Drupal site to select for the active command, and any may be used here. The example uses cd [DOCROOT] , but you could also use the --root and --uri flags.","title":"Cron"},{"location":"cron/#running-drupal-cron-tasks-from-drush","text":"Drupal cron tasks are often set up to be run via a wget call to cron.php; this same task can also be accomplished via the cron command , which circumvents the need to provide a web server interface to cron.","title":"Running Drupal cron tasks from Drush"},{"location":"cron/#quick-start","text":"If you just want to get started quickly, here is a crontab entry that will run cron once every hour at ten minutes after the hour: 10 * * * * cd [DOCROOT] && /usr/bin/env PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin COLUMNS=72 ../vendor/bin/drush --uri=your.drupalsite.org --quiet cron You should set up crontab to run your cron tasks as the same user that runs the web server; for example, if you run your web server as the user www-data: sudo crontab -u www-data -e You might need to edit the crontab entry shown above slightly for your particular setup; for example, if you have installed Drush to some directory other than /usr/local/drush, then you will need to adjust the path to drush appropriately. We'll break down the meaning of each section of the crontab entry in the documentation that continues below.","title":"Quick start"},{"location":"cron/#setting-the-schedule","text":"See man 5 crontab for information on how to format the information in a crontab entry. In the example above, the schedule for the crontab is set by the string 10 * * * * . These fields are the minute, hour, day of month, month and day of week; * means essentially 'all values', so 10 * * * * will run any time the minute == 10 (once every hour).","title":"Setting the schedule"},{"location":"cron/#setting-the-path","text":"We use /usr/bin/env to run Drush so that we can set up some necessary environment variables that Drush needs to execute. By default, cron will run each command with an empty PATH, which would not work well with Drush. To find out what your PATH needs to be, just type: echo $PATH Take the value that is output and place it into your crontab entry in the place of the one shown above. You can remove any entry that is known to not be of interest to Drush (e.g. /usr/games), or is only useful in a graphic environment (e.g. /usr/X11/bin).","title":"Setting the PATH"},{"location":"cron/#setting-columns","text":"When running Drush in a terminal, the number of columns will be automatically determined by Drush by way of the tput command, which queries the active terminal to determine what the width of the screen is. When running Drush from cron, there will not be any terminal set, and the call to tput will produce an error message. Spurious error messages are undesirable, as cron is often configured to send email whenever any output is produced, so it is important to make an effort to insure that successful runs of cron complete with no output. In some cases, Drush is smart enough to recognize that there is no terminal -- if the terminal value is empty or \"dumb\", for example. However, there are some \"non-terminal\" values that Drush does not recognize, such as \"unknown.\" If you manually set COLUMNS , then Drush will respect your setting and will not attempt to call tput.","title":"Setting COLUMNS"},{"location":"cron/#using-quiet","text":"By default, Drush will print a success message when the run of cron is completed. The --quiet flag will suppress these and other progress messages, again avoiding an unnecessary email message.","title":"Using --quiet"},{"location":"cron/#specifying-the-drupal-site-to-run","text":"There are many ways to tell Drush which Drupal site to select for the active command, and any may be used here. The example uses cd [DOCROOT] , but you could also use the --root and --uri flags.","title":"Specifying the Drupal site to run"},{"location":"dependency-injection/","text":"Dependency Injection \u00b6 Drush command files obtain references to the resources they need through a technique called dependency injection . When using this programing paradigm, a class by convention will never use the new operator to instantiate dependencies. Instead, it will store the other objects it needs in class variables, and provide a way for other code to assign an object to that variable. Types of Injection \u00b6 There are two ways that a class can receive its dependencies. One is called \u201cconstructor injection\u201d, and the other is called \u201csetter injection\u201d. Example of constructor injection: public function __construct ( DependencyType $service ) { $this -> service = $service ; } Example of setter injection: public function setService ( DependencyType $service ) { $this -> service = $service ; } A class should use one or the other of these methods. The code that is responsible for providing the dependencies a class need is usually an object called the dependency injection container. Services Files \u00b6 Drush command files can request that Drupal inject services by using a drush.services.yml file. See creating commands for instructions on how to use the Drupal Code Generator to create a simple command file starter with a drush.services.yml file. An initial services file will look something like this: services : my_module.commands : class : \\Drupal\\my_module\\Commands\\MyModuleiCommands tags : - { name : drush.command } See the Drupal Documentation for details on how to inject Drupal services into your command file. The process is exactly the same as using a Drupal services.yml file to inject services into your module classes. Inflection \u00b6 Drush will also inject dependencies that it provides using a technique called inflection. Inflection is a kind of dependency injection that works by way of a set of provided inflection interfaces, one for each available service. Each of these interfaces will define one or more setter methods (usually only one); these will automatically be called by Drush when the commandfile object is instantiated. The command only needs to implement this method and save the provided object in a class field. There is usually a corresponding trait that may be included via a use statement to fulfill this requirement. For example: <? php namespace Drupal\\my_module\\Commands ; use Drush\\Commands\\DrushCommands ; use Consolidation\\OutputFormatters\\StructuredData\\ListDataFromKeys ; use Consolidation\\SiteAlias\\SiteAliasManagerAwareInterface ; use Consolidation\\SiteAlias\\SiteAliasManagerAwareTrait ; class MyModuleCommands extends DrushCommands implements SiteAliasManagerAwareInterface { use SiteAliasManagerAwareTrait ; /** * Prints the currenbt alias name and info. * * @command mymodule:myAlias * @return \\Consolidation\\OutputFormatters\\StructuredData\\ListDataFromKeys */ public function myAlias () { $selfAlias = $this -> siteAliasManager () -> getSelf (); $this -> logger () -> success ( \u2018The current alias is { name } \u2019 , [ \u2018name\u2019 => $selfAlias ]); return new ListDataFromKeys ( $aliasRecord -> export ()); } } All Drush command files extend DrushCommands. DrushCommands implements ConfigAwareInterface, IOAwareInterface, LoggerAwareInterface, which gives access to $this->getConfig() , $this->logger() and other ways to do input and output. See the IO documentation for more information. Any additional services that are desired must be injected by implementing the appropriate inflection interface. Additional Interfaces: AutoloaderAwareInterface: Provides access to the class loader. SiteAliasManagerAwareInterface: The site alias manager allows alias records to be obtained . CustomEventAwareInterface: Allows command files to define and fire custom events that other command files can hook. ContainerAwareInterface: Provides Drush's dependency injection container. Note that although the autoloader and Drush dependency injection container is available and may be injected into your command file if needed, this should be avoided. Favor using services that can be injected from Drupal or Drush. Some of the objects in the container are not part of the Drush public API, and may not maintain compatibility in minor and patch releases.","title":"Dependency injection"},{"location":"dependency-injection/#dependency-injection","text":"Drush command files obtain references to the resources they need through a technique called dependency injection . When using this programing paradigm, a class by convention will never use the new operator to instantiate dependencies. Instead, it will store the other objects it needs in class variables, and provide a way for other code to assign an object to that variable.","title":"Dependency Injection"},{"location":"dependency-injection/#types-of-injection","text":"There are two ways that a class can receive its dependencies. One is called \u201cconstructor injection\u201d, and the other is called \u201csetter injection\u201d. Example of constructor injection: public function __construct ( DependencyType $service ) { $this -> service = $service ; } Example of setter injection: public function setService ( DependencyType $service ) { $this -> service = $service ; } A class should use one or the other of these methods. The code that is responsible for providing the dependencies a class need is usually an object called the dependency injection container.","title":"Types of Injection"},{"location":"dependency-injection/#services-files","text":"Drush command files can request that Drupal inject services by using a drush.services.yml file. See creating commands for instructions on how to use the Drupal Code Generator to create a simple command file starter with a drush.services.yml file. An initial services file will look something like this: services : my_module.commands : class : \\Drupal\\my_module\\Commands\\MyModuleiCommands tags : - { name : drush.command } See the Drupal Documentation for details on how to inject Drupal services into your command file. The process is exactly the same as using a Drupal services.yml file to inject services into your module classes.","title":"Services Files"},{"location":"dependency-injection/#inflection","text":"Drush will also inject dependencies that it provides using a technique called inflection. Inflection is a kind of dependency injection that works by way of a set of provided inflection interfaces, one for each available service. Each of these interfaces will define one or more setter methods (usually only one); these will automatically be called by Drush when the commandfile object is instantiated. The command only needs to implement this method and save the provided object in a class field. There is usually a corresponding trait that may be included via a use statement to fulfill this requirement. For example: <? php namespace Drupal\\my_module\\Commands ; use Drush\\Commands\\DrushCommands ; use Consolidation\\OutputFormatters\\StructuredData\\ListDataFromKeys ; use Consolidation\\SiteAlias\\SiteAliasManagerAwareInterface ; use Consolidation\\SiteAlias\\SiteAliasManagerAwareTrait ; class MyModuleCommands extends DrushCommands implements SiteAliasManagerAwareInterface { use SiteAliasManagerAwareTrait ; /** * Prints the currenbt alias name and info. * * @command mymodule:myAlias * @return \\Consolidation\\OutputFormatters\\StructuredData\\ListDataFromKeys */ public function myAlias () { $selfAlias = $this -> siteAliasManager () -> getSelf (); $this -> logger () -> success ( \u2018The current alias is { name } \u2019 , [ \u2018name\u2019 => $selfAlias ]); return new ListDataFromKeys ( $aliasRecord -> export ()); } } All Drush command files extend DrushCommands. DrushCommands implements ConfigAwareInterface, IOAwareInterface, LoggerAwareInterface, which gives access to $this->getConfig() , $this->logger() and other ways to do input and output. See the IO documentation for more information. Any additional services that are desired must be injected by implementing the appropriate inflection interface. Additional Interfaces: AutoloaderAwareInterface: Provides access to the class loader. SiteAliasManagerAwareInterface: The site alias manager allows alias records to be obtained . CustomEventAwareInterface: Allows command files to define and fire custom events that other command files can hook. ContainerAwareInterface: Provides Drush's dependency injection container. Note that although the autoloader and Drush dependency injection container is available and may be injected into your command file if needed, this should be avoided. Favor using services that can be injected from Drupal or Drush. Some of the objects in the container are not part of the Drush public API, and may not maintain compatibility in minor and patch releases.","title":"Inflection"},{"location":"deploycommand/","text":"Deploy \u00b6 10.3+ The deploy command standardizes how Drupal deployments work. The intent is your deployment script updates the codebase for the target site and then this command performs the following: drush updatedb --no-cache-clear drush cache:rebuild drush config:import drush cache:rebuild drush deploy:hook Authoring update functions \u00b6 Below are the 3 types of update functions run by this command, in order. Choose the most appropriate for your need. Function Drupal API Purpose HOOK_update_n() Not allowed Low level changes. HOOK_post_update_NAME() Allowed Runs before config is imported. HOOK_deploy_NAME() Allowed Runs after config is imported. Configuration \u00b6 If you need to customize this command, you should use Drush configuration for the subcommands listed above (e.g. updatedb , config:import , etc.).","title":"Deploy"},{"location":"deploycommand/#deploy","text":"10.3+ The deploy command standardizes how Drupal deployments work. The intent is your deployment script updates the codebase for the target site and then this command performs the following: drush updatedb --no-cache-clear drush cache:rebuild drush config:import drush cache:rebuild drush deploy:hook","title":"Deploy"},{"location":"deploycommand/#authoring-update-functions","text":"Below are the 3 types of update functions run by this command, in order. Choose the most appropriate for your need. Function Drupal API Purpose HOOK_update_n() Not allowed Low level changes. HOOK_post_update_NAME() Allowed Runs before config is imported. HOOK_deploy_NAME() Allowed Runs after config is imported.","title":"Authoring update functions"},{"location":"deploycommand/#configuration","text":"If you need to customize this command, you should use Drush configuration for the subcommands listed above (e.g. updatedb , config:import , etc.).","title":"Configuration"},{"location":"generators/","text":"Overview \u00b6 Generators jump start your coding by building all the boring boilerplate code for you. After running the generate command , you have a guide for where to insert your custom logic. Drush's generators reuse classes provided by the excellent Drupal Code Generator project. See its Commands directory for inspiration. Writing Custom Generators \u00b6 Drupal modules may supply their own Generators, just like they can supply Commands. See Woot module , which Drush uses for testing. Specifically, Write a class similar to ExampleGenerator . Implement your custom logic in the generate() method. Typically this class is placed under the src/Generators directory. Add a .twig file to the same directory. This template specifies what gets output from the generator. Add your class to your module's drush.services.yml file ( example ). Use the tag drush.generator.v2 instead of drush.command . Perform a drush cache-rebuild to compile your drush.services.yml changes into the Drupal container. Global Generators \u00b6 Generators that don't ship inside Drupal modules are called global generators. In general, it is better to use modules to carry your generators. If you still prefer using a global generator, please note: The generator class should be PSR4 auto-loadable. The generator class namespace, relative to base namespace, should be Drush\\Generators . For instance, if a Drush generator provider third party library maps this PSR4 autoload entry: \"autoload\" : { \"psr-4\" : { \"My\\\\Custom\\\\Library\\\\\" : \"src\" } } then the Drush global generator class namespace should be My\\Custom\\Library\\Drush\\Generators and the class file should be located under the src/Drush/Generators directory. The global generator namespace should start with \\Drush\\Generators but this might be subject to change in the following release. The filename must have a name like FooGenerator.php. The prefix Foo can be whatever string you want. The file must end in Generator.php When the namespace starts with \\Drush\\Generators , the directory above Generators must be one of: A Folder listed in the --include option. include may be provided via config or via CLI. ../drush , /drush or /sites/all/drush . These paths are relative to Drupal root.","title":"Generator Authoring"},{"location":"generators/#overview","text":"Generators jump start your coding by building all the boring boilerplate code for you. After running the generate command , you have a guide for where to insert your custom logic. Drush's generators reuse classes provided by the excellent Drupal Code Generator project. See its Commands directory for inspiration.","title":"Overview"},{"location":"generators/#writing-custom-generators","text":"Drupal modules may supply their own Generators, just like they can supply Commands. See Woot module , which Drush uses for testing. Specifically, Write a class similar to ExampleGenerator . Implement your custom logic in the generate() method. Typically this class is placed under the src/Generators directory. Add a .twig file to the same directory. This template specifies what gets output from the generator. Add your class to your module's drush.services.yml file ( example ). Use the tag drush.generator.v2 instead of drush.command . Perform a drush cache-rebuild to compile your drush.services.yml changes into the Drupal container.","title":"Writing Custom Generators"},{"location":"generators/#global-generators","text":"Generators that don't ship inside Drupal modules are called global generators. In general, it is better to use modules to carry your generators. If you still prefer using a global generator, please note: The generator class should be PSR4 auto-loadable. The generator class namespace, relative to base namespace, should be Drush\\Generators . For instance, if a Drush generator provider third party library maps this PSR4 autoload entry: \"autoload\" : { \"psr-4\" : { \"My\\\\Custom\\\\Library\\\\\" : \"src\" } } then the Drush global generator class namespace should be My\\Custom\\Library\\Drush\\Generators and the class file should be located under the src/Drush/Generators directory. The global generator namespace should start with \\Drush\\Generators but this might be subject to change in the following release. The filename must have a name like FooGenerator.php. The prefix Foo can be whatever string you want. The file must end in Generator.php When the namespace starts with \\Drush\\Generators , the directory above Generators must be one of: A Folder listed in the --include option. include may be provided via config or via CLI. ../drush , /drush or /sites/all/drush . These paths are relative to Drupal root.","title":"Global Generators"},{"location":"hooks/","text":"Core Hooks \u00b6 All commandfiles may implement methods that are called by Drush at various times in the request cycle. To implement one, add a @hook validate (for example) to the top of your method. Documentation about available hooks . To see how core commands implement a hook, you can search the Drush source code . This link uses validate hook as an example. Custom Hooks \u00b6 Drush commands can define custom events that other command files can hook. You can find examples in CacheCommands and SanitizeCommands First, the command must implement CustomEventAwareInterface and use CustomEventAwareTrait, as described in the dependency injection documentation. Then, the command may ask the provided hook manager to return a list of handlers with a certain annotation. In the example below, the my-event label is used: /** * This command uses a custom event 'my-event' to collect data. Note that * the event handlers will not be found unless the hook manager is * injected into this command handler object via `setHookManager()` * (defined in CustomEventAwareTrait). * * @command example:command */ public function exampleCommand () { $myEventHandlers = $this -> getCustomEventHandlers ( 'my-event' ); $result = []; foreach ( $myEventHandlers as $handler ) { $result [] = $handler (); } sort ( $result ); return implode ( ',' , $result ); } Other command handlers may provide implementations by implementing @hook on-event my-event or #[CLI/Hook(type: 'on-event', target: 'my-event')] . /** * @hook on-event my-event */ public function hookOne () { return 'one' ; }","title":"Hooks"},{"location":"hooks/#core-hooks","text":"All commandfiles may implement methods that are called by Drush at various times in the request cycle. To implement one, add a @hook validate (for example) to the top of your method. Documentation about available hooks . To see how core commands implement a hook, you can search the Drush source code . This link uses validate hook as an example.","title":"Core Hooks"},{"location":"hooks/#custom-hooks","text":"Drush commands can define custom events that other command files can hook. You can find examples in CacheCommands and SanitizeCommands First, the command must implement CustomEventAwareInterface and use CustomEventAwareTrait, as described in the dependency injection documentation. Then, the command may ask the provided hook manager to return a list of handlers with a certain annotation. In the example below, the my-event label is used: /** * This command uses a custom event 'my-event' to collect data. Note that * the event handlers will not be found unless the hook manager is * injected into this command handler object via `setHookManager()` * (defined in CustomEventAwareTrait). * * @command example:command */ public function exampleCommand () { $myEventHandlers = $this -> getCustomEventHandlers ( 'my-event' ); $result = []; foreach ( $myEventHandlers as $handler ) { $result [] = $handler (); } sort ( $result ); return implode ( ',' , $result ); } Other command handlers may provide implementations by implementing @hook on-event my-event or #[CLI/Hook(type: 'on-event', target: 'my-event')] . /** * @hook on-event my-event */ public function hookOne () { return 'one' ; }","title":"Custom Hooks"},{"location":"install/","text":"Tip Drush only supports one install method. It requires that your Drupal site be built with Composer and Drush be listed as a dependency. See the Drush 8 or Drush 9 docs for installing prior versions of Drush. It is required that Drupal sites be built using Composer, with Drush listed as a dependency. Popular starter templates for that include drupal-project (Drush is included) and recommended-project (Drush must be added). If your Composer project doesn't yet depend on Drush, run composer require drush/drush to add it. After this step, you may call Drush via vendor/bin/drush . Optional. To be able to call drush from anywhere, install the Drush Launcher . That is a small program which listens on your $PATH and hands control to a site-local Drush that is in the /vendor directory of your Composer project. Note See Usage for details on using Drush. To use a non-default PHP, edit ~/.bashrc so that the desired PHP is in front of your $PATH . If that is not desirable, you can change your PATH for just one request: PATH=/path/to/php:$PATH drush status ...` To use a custom php.ini for Drush requests, see this comment . See our guide on porting commandfiles from Drush 8 to later versions. Also note that alias and config files use a new .yml format in Drush 10+. Drupal Compatibility \u00b6 Drush Version PHP Version End Of Life Drupal versions 7 -8.3 8.4+ 9 Drush 11 7.4+ TBD \u2705 Drush 10 7.1+ Nov 2021 \u2713 \u2713 Drush 9 5.6+ May 2020 \u2713 Drush 8 5.4.5+ Nov 2022 \u2705 \u2705 \u26a0\ufe0f Drush 7 5.3.0+ Jul 2017 \u2713 Drush 6 5.3.0+ Dec 2015 \u2713 Drush 5 5.2.0+ May 2015 \u2713 Legend \u2705 Supported and recommended \u26a0\ufe0f Supported but not recommended \u2713 Compatible but no longer supported","title":"Install"},{"location":"install/#drupal-compatibility","text":"Drush Version PHP Version End Of Life Drupal versions 7 -8.3 8.4+ 9 Drush 11 7.4+ TBD \u2705 Drush 10 7.1+ Nov 2021 \u2713 \u2713 Drush 9 5.6+ May 2020 \u2713 Drush 8 5.4.5+ Nov 2022 \u2705 \u2705 \u26a0\ufe0f Drush 7 5.3.0+ Jul 2017 \u2713 Drush 6 5.3.0+ Dec 2015 \u2713 Drush 5 5.2.0+ May 2015 \u2713 Legend \u2705 Supported and recommended \u26a0\ufe0f Supported but not recommended \u2713 Compatible but no longer supported","title":"Drupal Compatibility"},{"location":"io/","text":"Input / Output \u00b6 The Input object holds information about the request such option and argument values. You may need to this information when coding a hook implementation. You don't need this object in your command callback method since these values are passed as parameters. The Output object is rarely needed. Instead, return an object that gets formatted via the Output Formatter system. If you want to send additional output, use the io system (see below). The io() system \u00b6 If you need to ask the user a question, or print non-object content, use the io() system. A command callback gets access via $this->io() . The main methods for gathering user input are $this->io()->choice() and $this->io()->confirm() . You may use any of the methods described in the Symfony Style docs .","title":"Input / Output"},{"location":"io/#input-output","text":"The Input object holds information about the request such option and argument values. You may need to this information when coding a hook implementation. You don't need this object in your command callback method since these values are passed as parameters. The Output object is rarely needed. Instead, return an object that gets formatted via the Output Formatter system. If you want to send additional output, use the io system (see below).","title":"Input / Output"},{"location":"io/#the-io-system","text":"If you need to ask the user a question, or print non-object content, use the io() system. A command callback gets access via $this->io() . The main methods for gathering user input are $this->io()->choice() and $this->io()->confirm() . You may use any of the methods described in the Symfony Style docs .","title":"The io() system"},{"location":"migrate/","text":"Defining and running migrations \u00b6 10.4+ The Migrate API delivers services for migrating data from a source system to Drupal. This API is provided by the core migrate module. In order to migrate data to Drupal, you'll need to create migrations for each type of destination data. These commands are an alternative to https://www.drupal.org/project/migrate_tools . Don't use that module if you use these commands. Defining migrations \u00b6 Learn how to create migrations from the Drupal official documentation: Migrate API overview: https://www.drupal.org/docs/8/api/migrate-api/migrate-api-overview Drupal API: https://api.drupal.org/api/drupal/core%21modules%21migrate%21migrate.api.php/group/migration Running migrations \u00b6 Drush provides a set of commands that allows to run migration operations such as importing, checking the current status of migrations , rolling-back migrations , stopping an ongoing migration , etc. Such commands are available only when the migrate module is enabled. In order the get a full list of migrate commands, type: drush --filter=migrate To get help on each command run drush with the command name as parameter and the --help option. For example next command will show details about the migrate:import Drush command: drush migrate:import --help","title":"Migrate"},{"location":"migrate/#defining-and-running-migrations","text":"10.4+ The Migrate API delivers services for migrating data from a source system to Drupal. This API is provided by the core migrate module. In order to migrate data to Drupal, you'll need to create migrations for each type of destination data. These commands are an alternative to https://www.drupal.org/project/migrate_tools . Don't use that module if you use these commands.","title":"Defining and running migrations"},{"location":"migrate/#defining-migrations","text":"Learn how to create migrations from the Drupal official documentation: Migrate API overview: https://www.drupal.org/docs/8/api/migrate-api/migrate-api-overview Drupal API: https://api.drupal.org/api/drupal/core%21modules%21migrate%21migrate.api.php/group/migration","title":"Defining migrations"},{"location":"migrate/#running-migrations","text":"Drush provides a set of commands that allows to run migration operations such as importing, checking the current status of migrations , rolling-back migrations , stopping an ongoing migration , etc. Such commands are available only when the migrate module is enabled. In order the get a full list of migrate commands, type: drush --filter=migrate To get help on each command run drush with the command name as parameter and the --help option. For example next command will show details about the migrate:import Drush command: drush migrate:import --help","title":"Running migrations"},{"location":"output-formats-filters/","text":"Output Formats, Fields and Filters \u00b6 Drush utilizes a powerful formatting and filtering system that provides the user with a lot of control over how output from various commands is rendered. Output formats may be used to select the data type used to print the output. For example, many commands allow the user to select between a human-readable table, or various machine-parsable formats such as yaml and json. Output fields may be used to select and order the data columns. Output filters may be used to limit which data rows are printed based on logical expressions. Output Formats \u00b6 The --format option may be used to select the data format used to print the output of a command. Most commands that produce informative output about some object or system can transform their data into different formats. For example, the version command may be printed in a human-readable table (the default), or in a json array: $ drush version Drush version : 10 .3.1 $ drush version --format = json { \"drush-version\" : \"10.3.1\" } The available output formats are shown in the help for each command: $ drush help version Show drush version. Options: --format = <json> Select output format. Available: json, string, var_export, yaml. Default is key-value. Output Fields \u00b6 If you wish to limit the number of columns produced by a command, use the --fields option. List the field names in the order they should be displayed: $ drush views:list --fields = machine-name,status +-------------------+----------+ | Machine name | Status | +-------------------+----------+ | block_content | Enabled | | comment | Enabled | | comments_recent | Enabled | | content | Enabled | | content_recent | Enabled | | files | Enabled | | frontpage | Enabled | | taxonomy_term | Enabled | | user_admin_people | Enabled | | watchdog | Enabled | | who_s_new | Enabled | | who_s_online | Enabled | | archive | Disabled | | glossary | Disabled | +-------------------+----------+ The available field names are shown in the help text: $ drush help views:list Get a list of all views in the system. Options: --fields = FIELDS Available fields: Machine name ( machine-name ) , Name ( label ) , Description ( description ) , Status ( status ) , Tag ( tag ) [ default: \"machine-name,label,description,status\" ] Fields may be named either using their human-readable name, or via their machine name. Note also that some commands do not display all of their available data columns by default. To show all available fields, use --fields=* There is also a singular form --field available. If this form is used, it will also force the output format to string . $ drush views:list --field = machine-name block_content comment comments_recent content content_recent files frontpage taxonomy_term user_admin_people watchdog who_s_new who_s_online archive glossary Output Filters \u00b6 A number of Drush commands that output tabular data support a --filter option that allows rows from the output to be selected with simple logic expressions. In its simplest form, the --filter option takes a string that indicates the value to filter by in the command's default filter field . For example, the role:list command specifies perms as its default filter; the output of the role:list command may be limited to only those roles that have a specified permission: $ drush role:list --filter = 'post comments' authenticated: label: 'Authenticated user' perms: - 'access comments' - 'access content' - 'access shortcuts' - 'access site-wide contact form' - 'access user contact forms' - 'post comments' - 'search content' - 'skip comment approval' - 'use text format basic_html' Note that not all commands have a default filter field. Other fields in the output may be searched by using a simple expression in the --filter term. For example, to list only the enabled extensions with the pm:list command, you could run: $ drush pm:list --filter = 'status=enabled' To search for fields that contain a string using the operator *= , or match a regular expression with the ~= operator. For example, to find all views whose machine name contains the word content : drush views:list --filter = 'machine-name*=content' To use a regular expression to find any core requirement notice whose title contains either php or gd drush core:requirements --filter = 'title~=#(php|gd)#i' Finally, filter expressions may also use logical-and ( && ) or logical-or ( || ) operations to separate multiple terms. Parenthesis are not supported. For example, to search both the title and severity fields in the core:requirements command: drush core:requirements --filter = 'title~=#(php|gd)#i&&severity=warning' The = and *= operators always use case-insensitive comparisons. The ~= operator is case-sensitive, unless the i PCRE modifier is used, as shown in the previous example. Comparison of Filters with Grep \u00b6 Using the --filter feature is similar to using grep . The main difference is that the filter feature does a semantic search, which is to say that it explicitly compares against the data in specific fields. In comparison, the grep command does a line-based search. Show only results where the severity is warning : drush core:requirements --filter = 'severity=warning' Show only lines that contain the string warning (either in the severity field, or somewhere else on the line): drush core:requirements | grep -i warning The table below compares and contrasts the two ways of searching. Feature --filter grep Regular expressions Yes, with ~= Yes Word-wrapped field data Searched correctly Might cause false negative Search just one field Yes Might get false positives Search multiple fields Yes, with || / && Yes (line-based searching) Searching hides header No Yes (unless it matches)","title":"Output Formats, Fields & Filters"},{"location":"output-formats-filters/#output-formats-fields-and-filters","text":"Drush utilizes a powerful formatting and filtering system that provides the user with a lot of control over how output from various commands is rendered. Output formats may be used to select the data type used to print the output. For example, many commands allow the user to select between a human-readable table, or various machine-parsable formats such as yaml and json. Output fields may be used to select and order the data columns. Output filters may be used to limit which data rows are printed based on logical expressions.","title":"Output Formats, Fields and Filters"},{"location":"output-formats-filters/#output-formats","text":"The --format option may be used to select the data format used to print the output of a command. Most commands that produce informative output about some object or system can transform their data into different formats. For example, the version command may be printed in a human-readable table (the default), or in a json array: $ drush version Drush version : 10 .3.1 $ drush version --format = json { \"drush-version\" : \"10.3.1\" } The available output formats are shown in the help for each command: $ drush help version Show drush version. Options: --format = <json> Select output format. Available: json, string, var_export, yaml. Default is key-value.","title":"Output Formats"},{"location":"output-formats-filters/#output-fields","text":"If you wish to limit the number of columns produced by a command, use the --fields option. List the field names in the order they should be displayed: $ drush views:list --fields = machine-name,status +-------------------+----------+ | Machine name | Status | +-------------------+----------+ | block_content | Enabled | | comment | Enabled | | comments_recent | Enabled | | content | Enabled | | content_recent | Enabled | | files | Enabled | | frontpage | Enabled | | taxonomy_term | Enabled | | user_admin_people | Enabled | | watchdog | Enabled | | who_s_new | Enabled | | who_s_online | Enabled | | archive | Disabled | | glossary | Disabled | +-------------------+----------+ The available field names are shown in the help text: $ drush help views:list Get a list of all views in the system. Options: --fields = FIELDS Available fields: Machine name ( machine-name ) , Name ( label ) , Description ( description ) , Status ( status ) , Tag ( tag ) [ default: \"machine-name,label,description,status\" ] Fields may be named either using their human-readable name, or via their machine name. Note also that some commands do not display all of their available data columns by default. To show all available fields, use --fields=* There is also a singular form --field available. If this form is used, it will also force the output format to string . $ drush views:list --field = machine-name block_content comment comments_recent content content_recent files frontpage taxonomy_term user_admin_people watchdog who_s_new who_s_online archive glossary","title":"Output Fields"},{"location":"output-formats-filters/#output-filters","text":"A number of Drush commands that output tabular data support a --filter option that allows rows from the output to be selected with simple logic expressions. In its simplest form, the --filter option takes a string that indicates the value to filter by in the command's default filter field . For example, the role:list command specifies perms as its default filter; the output of the role:list command may be limited to only those roles that have a specified permission: $ drush role:list --filter = 'post comments' authenticated: label: 'Authenticated user' perms: - 'access comments' - 'access content' - 'access shortcuts' - 'access site-wide contact form' - 'access user contact forms' - 'post comments' - 'search content' - 'skip comment approval' - 'use text format basic_html' Note that not all commands have a default filter field. Other fields in the output may be searched by using a simple expression in the --filter term. For example, to list only the enabled extensions with the pm:list command, you could run: $ drush pm:list --filter = 'status=enabled' To search for fields that contain a string using the operator *= , or match a regular expression with the ~= operator. For example, to find all views whose machine name contains the word content : drush views:list --filter = 'machine-name*=content' To use a regular expression to find any core requirement notice whose title contains either php or gd drush core:requirements --filter = 'title~=#(php|gd)#i' Finally, filter expressions may also use logical-and ( && ) or logical-or ( || ) operations to separate multiple terms. Parenthesis are not supported. For example, to search both the title and severity fields in the core:requirements command: drush core:requirements --filter = 'title~=#(php|gd)#i&&severity=warning' The = and *= operators always use case-insensitive comparisons. The ~= operator is case-sensitive, unless the i PCRE modifier is used, as shown in the previous example.","title":"Output Filters"},{"location":"output-formats-filters/#comparison-of-filters-with-grep","text":"Using the --filter feature is similar to using grep . The main difference is that the filter feature does a semantic search, which is to say that it explicitly compares against the data in specific fields. In comparison, the grep command does a line-based search. Show only results where the severity is warning : drush core:requirements --filter = 'severity=warning' Show only lines that contain the string warning (either in the severity field, or somewhere else on the line): drush core:requirements | grep -i warning The table below compares and contrasts the two ways of searching. Feature --filter grep Regular expressions Yes, with ~= Yes Word-wrapped field data Searched correctly Might cause false negative Search just one field Yes Might get false positives Search multiple fields Yes, with || / && Yes (line-based searching) Searching hides header No Yes (unless it matches)","title":"Comparison of Filters with Grep"},{"location":"repl/","text":"The php:cli command is interactive PHP REPL with your bootstrapped site (remote or local). It\u2019s a Drupal code playground. You can do quick code experimentation, grab some data, or run Drush commands. This can also help with debugging certain issues. See this blog post for an introduction. Run help for a list of commands.","title":"REPL (a custom shell for Drupal)"},{"location":"site-alias-manager/","text":"Site Alias Manager \u00b6 The Site Alias Manager (SAM) service is used to retrieve information about one or all of the site aliases for the current installation. An informative example is the browse command A commandfile gets access to the SAM by implementing the SiteAliasManagerAwareInterface and use ing the SiteAliasManagerAwareTrait trait. Then you gain access via $this->siteAliasManager() . If an alias was used for the current request, it is available via $this->siteAliasManager()->getself() . The SAM generally deals in SiteAlias objects. That is how any given site alias is represented. See its methods for determining things like whether the alias points to a local host or remote host. Site alias docs . Dynamically alter site aliases . The SAM is also available for as a standalone Composer project . More information available in the README there.","title":"Site Alias Manager"},{"location":"site-alias-manager/#site-alias-manager","text":"The Site Alias Manager (SAM) service is used to retrieve information about one or all of the site aliases for the current installation. An informative example is the browse command A commandfile gets access to the SAM by implementing the SiteAliasManagerAwareInterface and use ing the SiteAliasManagerAwareTrait trait. Then you gain access via $this->siteAliasManager() . If an alias was used for the current request, it is available via $this->siteAliasManager()->getself() . The SAM generally deals in SiteAlias objects. That is how any given site alias is represented. See its methods for determining things like whether the alias points to a local host or remote host. Site alias docs . Dynamically alter site aliases . The SAM is also available for as a standalone Composer project . More information available in the README there.","title":"Site Alias Manager"},{"location":"site-aliases/","text":"Site aliases \u00b6 Basic usage \u00b6 In its most basic form, the Drush site alias feature provides a way for teams to share short names that refer to the live and staging sites (usually remote) for a given Drupal site. Add an alias file called $PROJECT/drush/sites/self.site.yml , where $PROJECT is the project root (location of composer.json file). The site alias file should be named self.site.yml because this name is special, and is used to define the different environments (usually remote) of the current Drupal site. The contents of the alias file should look something like the example below: # File: self.site.yml live: host: server.domain.com user: www-admin root: /other/path/to/live/drupal uri: http://example.com stage: host: server.domain.com user: www-admin root: /other/path/to/stage/drupal uri: http://stage.example.com The top-level element names ( live and stage in the example above) are used to identify the different environments available for this site. These may be used on the command line to select a different target environment to operate on by prepending an @ character, e.g. @live or @stage . Following these steps, a cache:rebuild on the live environment would be: $ drush @live cache:rebuild All of the available aliases for a site's environments may be listed via: $ drush site:alias @self The elements of a site alias are: host : The fully-qualified domain name of the remote system hosting the Drupal instance. The host option must be omitted for local sites, as this option controls various operations, such as whether or not rsync parameters are for local or remote machines, and so on. user : The username to log in as when using ssh or docker. If each user has to use own username, you can create an environment variable which holds the value, and reference via ${env.PROJECT_SSH_USER} (for example). Or you may omit the user item and specify a user in the ~/.ssh/config file. root : The Drupal root; must not be specified as a relative path. uri : The value of --uri should always be the same as when the site is being accessed from a web browser (e.g. http://example.com ) Drush typically uses ssh to run commands on remote systems; all team members should install ssh keys on the target servers (e.g. via ssh-add ). Advanced usage \u00b6 It is also possible to create site alias files that reference other sites on the same local system. Site alias files for other local sites are usually stored in the directory ~/.drush/sites ; however, Drush does not search this location for alias files by default. To use this location, you must add the path in your Drush configuration file . For example, to re-add both of the default user alias path from Drush 8, put the following in your ~/.drush/drush.yml configuration file: drush: paths: alias-path: - '${env.HOME}/.drush/sites' - /etc/drush/sites A canonical alias named example that points to a local Drupal site named at http://example.com like this: # File: example.site.yml dev: root: /path/to/drupal uri: http://example.com Note that the first part of the filename (in this case example defines the name of the site alias, and the top-level key dev defines the name of the environment. With these definitions in place, it is possible to run commands targeting the dev environment of the target site via: $ drush @example.dev status This command is equivalent to the longer form: $ drush --root = /path/to/drupal --uri = http://example.com status See Additional Site Alias Options for more information. Converting Legacy Alias Files \u00b6 To convert legacy alias (*.aliases.drushrc.php) to yml, run the site:alias-convert command. Altering aliases: \u00b6 See examples/Commands/SiteAliasAlterCommands.php ) for an example. Environment variables \u00b6 Site aliases may reference environment variables, just like any Drush config file. For example, ${env.PROJECT_SSH_USER} will be replaced by the value of the PROJECT_SSH_USER environment value. SSH site aliases may set environment variables via the env-var key. See below. Additional Site Alias Options \u00b6 Aliases are commonly used to define short names for local or remote Drupal installations; however, an alias is really nothing more than a collection of options. docker : When specified, Drush executes via docker-compose exec rather than ssh . service : the name of the container to run on. exec : options : Options for the exec subcommand. os : The operating system of the remote server. Valid values are Windows and Linux . Set this value for all remote aliases where the remote's OS differs from the local. This is especially relevant for the sql:sync command. ssh : Contains settings used to control how ssh commands are generated when running remote commands. options : Contains additional commandline options for the ssh command itself, e.g. -p 100 tty : Usually, Drush will decide whether or not to create a tty (via the ssh --t option) based on whether the local Drush command is running interactively or not. To force Drush to always or never create a tty, set the ssh.tty option to true or false , respectively. paths : An array of aliases for common rsync targets. Relative aliases are always taken from the Drupal root. files : Path to files directory. This will be looked up if not specified. drush-script : Path to the remote Drush command. command : These options will only be set if the alias is used with the specified command. In the advanced example below, the option --no-dump will be selected whenever the @stage alias is used in any of the following ways: drush @stage sql-sync @self @live drush sql-sync @stage @live drush sql-sync @live @stage env-vars : An array of key / value pairs that will be set as environment variables. Complex example: # File: remote.site.yml live: host: server.domain.com user: www-admin root: /other/path/to/drupal uri: http://example.com ssh: options: '-p 100' paths: drush-script: '/path/to/drush' env-vars: PATH: /bin:/usr/bin:/home/www-admin/.composer/vendor/bin DRUPAL_ENV: live command: site: install: options: admin-password: 'secret-secret' Site Alias Files for Service Providers \u00b6 There are a number of service providers that manage Drupal sites as a service. Drush allows service providers to create collections of site alias files to reference all of the sites available to a single user. In order to do this, a new location must be defined in your Drush configuration file: drush: paths: alias-path: - '${env.HOME}/.drush/sites/provider-name' Site aliases stored in this directory may then be referenced by its full alias name, including its location, e.g.: $ drush @provider-name.example.dev Such alias files may still be referenced by their shorter name, e.g. @example.dev . Note that it is necessary to individually list every location where site alias files may be stored; Drush never does recursive (deep) directory searches for alias files. The site:alias command may also be used to list all of the sites and environments in a given location, e.g.: $ drush site:alias @provider-name Add the option --format=list to show only the names of each site and environment without also showing the values in each alias record. Wildcard Aliases for Service Providers \u00b6 Some service providers that manage Drupal sites allow customers to create multiple \"environments\" for a site. It is common for these providers to also have a feature to automatically create Drush aliases for all of a user's sites. Rather than write one record for every environment in that site, it is also possible to write a single wildcard alias that represents all possible environments. This is possible if the contents of each environment alias are identical save for the name of the environment in one or more values. The variable ${env-name} will be substituted with the environment name wherever it appears. Example wildcard record: # File: remote-example.site.yml '*': host: ${env-name}.server.domain.com user: www-admin root: /path/to/${env-name} uri: http://${env-name}.remote-example.com With a wildcard record, any environment name may be used, and will always match. This is not desirable in instances where the specified environment does not exist (e.g. if the user made a typo). An alias alter hook in a policy file may be used to catch these mistakes and report an error. See SiteAliasAlterCommands for an example on how to do this. Docker Compose and other transports \u00b6 The example below shows drush calling into a Docker hosted site. See the https://github.com/consolidation/site-alias and https://github.com/consolidation/site-process projects for more developer information about transports. An example appears below. Edit to suit: # File: mysite.site.yml local: This environment is an example of the DockerCompose transport. docker: service: drupal exec: options: --user USER stage: uri: http://stage.example.com root: /path/to/remote/drupal/root host: mystagingserver.myisp.com user: publisher os: Linux paths: - files: sites/mydrupalsite.com/files - custom: /my/custom/path command: sql: sync: options: no-dump: true dev: root: /path/to/docroot uri: https://dev.example.com Example of rsync with exclude-paths \u00b6 Note that most options typically passed to rsync via drush rsync are \"passthrough options\", which is to say they appear after the -- separator on the command line. Passthrough options are actually arguments, and it is not possible to set default arguments in an alias record. The drush rsync command does support two options, --mode and --exclude-paths , which are interpreted directly by Drush. Default values for these options may be specified in an alias record, as shown below. dev: root: /path/to/docroot uri: https://dev.example.com command: core: rsync: options: mode: rlptz exclude-paths: 'css:imagecache:ctools:js:tmp:php:styles'","title":"Site aliases"},{"location":"site-aliases/#site-aliases","text":"","title":"Site aliases"},{"location":"site-aliases/#basic-usage","text":"In its most basic form, the Drush site alias feature provides a way for teams to share short names that refer to the live and staging sites (usually remote) for a given Drupal site. Add an alias file called $PROJECT/drush/sites/self.site.yml , where $PROJECT is the project root (location of composer.json file). The site alias file should be named self.site.yml because this name is special, and is used to define the different environments (usually remote) of the current Drupal site. The contents of the alias file should look something like the example below: # File: self.site.yml live: host: server.domain.com user: www-admin root: /other/path/to/live/drupal uri: http://example.com stage: host: server.domain.com user: www-admin root: /other/path/to/stage/drupal uri: http://stage.example.com The top-level element names ( live and stage in the example above) are used to identify the different environments available for this site. These may be used on the command line to select a different target environment to operate on by prepending an @ character, e.g. @live or @stage . Following these steps, a cache:rebuild on the live environment would be: $ drush @live cache:rebuild All of the available aliases for a site's environments may be listed via: $ drush site:alias @self The elements of a site alias are: host : The fully-qualified domain name of the remote system hosting the Drupal instance. The host option must be omitted for local sites, as this option controls various operations, such as whether or not rsync parameters are for local or remote machines, and so on. user : The username to log in as when using ssh or docker. If each user has to use own username, you can create an environment variable which holds the value, and reference via ${env.PROJECT_SSH_USER} (for example). Or you may omit the user item and specify a user in the ~/.ssh/config file. root : The Drupal root; must not be specified as a relative path. uri : The value of --uri should always be the same as when the site is being accessed from a web browser (e.g. http://example.com ) Drush typically uses ssh to run commands on remote systems; all team members should install ssh keys on the target servers (e.g. via ssh-add ).","title":"Basic usage"},{"location":"site-aliases/#advanced-usage","text":"It is also possible to create site alias files that reference other sites on the same local system. Site alias files for other local sites are usually stored in the directory ~/.drush/sites ; however, Drush does not search this location for alias files by default. To use this location, you must add the path in your Drush configuration file . For example, to re-add both of the default user alias path from Drush 8, put the following in your ~/.drush/drush.yml configuration file: drush: paths: alias-path: - '${env.HOME}/.drush/sites' - /etc/drush/sites A canonical alias named example that points to a local Drupal site named at http://example.com like this: # File: example.site.yml dev: root: /path/to/drupal uri: http://example.com Note that the first part of the filename (in this case example defines the name of the site alias, and the top-level key dev defines the name of the environment. With these definitions in place, it is possible to run commands targeting the dev environment of the target site via: $ drush @example.dev status This command is equivalent to the longer form: $ drush --root = /path/to/drupal --uri = http://example.com status See Additional Site Alias Options for more information.","title":"Advanced usage"},{"location":"site-aliases/#converting-legacy-alias-files","text":"To convert legacy alias (*.aliases.drushrc.php) to yml, run the site:alias-convert command.","title":"Converting Legacy Alias Files"},{"location":"site-aliases/#altering-aliases","text":"See examples/Commands/SiteAliasAlterCommands.php ) for an example.","title":"Altering aliases:"},{"location":"site-aliases/#environment-variables","text":"Site aliases may reference environment variables, just like any Drush config file. For example, ${env.PROJECT_SSH_USER} will be replaced by the value of the PROJECT_SSH_USER environment value. SSH site aliases may set environment variables via the env-var key. See below.","title":"Environment variables"},{"location":"site-aliases/#additional-site-alias-options","text":"Aliases are commonly used to define short names for local or remote Drupal installations; however, an alias is really nothing more than a collection of options. docker : When specified, Drush executes via docker-compose exec rather than ssh . service : the name of the container to run on. exec : options : Options for the exec subcommand. os : The operating system of the remote server. Valid values are Windows and Linux . Set this value for all remote aliases where the remote's OS differs from the local. This is especially relevant for the sql:sync command. ssh : Contains settings used to control how ssh commands are generated when running remote commands. options : Contains additional commandline options for the ssh command itself, e.g. -p 100 tty : Usually, Drush will decide whether or not to create a tty (via the ssh --t option) based on whether the local Drush command is running interactively or not. To force Drush to always or never create a tty, set the ssh.tty option to true or false , respectively. paths : An array of aliases for common rsync targets. Relative aliases are always taken from the Drupal root. files : Path to files directory. This will be looked up if not specified. drush-script : Path to the remote Drush command. command : These options will only be set if the alias is used with the specified command. In the advanced example below, the option --no-dump will be selected whenever the @stage alias is used in any of the following ways: drush @stage sql-sync @self @live drush sql-sync @stage @live drush sql-sync @live @stage env-vars : An array of key / value pairs that will be set as environment variables. Complex example: # File: remote.site.yml live: host: server.domain.com user: www-admin root: /other/path/to/drupal uri: http://example.com ssh: options: '-p 100' paths: drush-script: '/path/to/drush' env-vars: PATH: /bin:/usr/bin:/home/www-admin/.composer/vendor/bin DRUPAL_ENV: live command: site: install: options: admin-password: 'secret-secret'","title":"Additional Site Alias Options"},{"location":"site-aliases/#site-alias-files-for-service-providers","text":"There are a number of service providers that manage Drupal sites as a service. Drush allows service providers to create collections of site alias files to reference all of the sites available to a single user. In order to do this, a new location must be defined in your Drush configuration file: drush: paths: alias-path: - '${env.HOME}/.drush/sites/provider-name' Site aliases stored in this directory may then be referenced by its full alias name, including its location, e.g.: $ drush @provider-name.example.dev Such alias files may still be referenced by their shorter name, e.g. @example.dev . Note that it is necessary to individually list every location where site alias files may be stored; Drush never does recursive (deep) directory searches for alias files. The site:alias command may also be used to list all of the sites and environments in a given location, e.g.: $ drush site:alias @provider-name Add the option --format=list to show only the names of each site and environment without also showing the values in each alias record.","title":"Site Alias Files for Service Providers"},{"location":"site-aliases/#wildcard-aliases-for-service-providers","text":"Some service providers that manage Drupal sites allow customers to create multiple \"environments\" for a site. It is common for these providers to also have a feature to automatically create Drush aliases for all of a user's sites. Rather than write one record for every environment in that site, it is also possible to write a single wildcard alias that represents all possible environments. This is possible if the contents of each environment alias are identical save for the name of the environment in one or more values. The variable ${env-name} will be substituted with the environment name wherever it appears. Example wildcard record: # File: remote-example.site.yml '*': host: ${env-name}.server.domain.com user: www-admin root: /path/to/${env-name} uri: http://${env-name}.remote-example.com With a wildcard record, any environment name may be used, and will always match. This is not desirable in instances where the specified environment does not exist (e.g. if the user made a typo). An alias alter hook in a policy file may be used to catch these mistakes and report an error. See SiteAliasAlterCommands for an example on how to do this.","title":"Wildcard Aliases for Service Providers"},{"location":"site-aliases/#docker-compose-and-other-transports","text":"The example below shows drush calling into a Docker hosted site. See the https://github.com/consolidation/site-alias and https://github.com/consolidation/site-process projects for more developer information about transports. An example appears below. Edit to suit: # File: mysite.site.yml local: This environment is an example of the DockerCompose transport. docker: service: drupal exec: options: --user USER stage: uri: http://stage.example.com root: /path/to/remote/drupal/root host: mystagingserver.myisp.com user: publisher os: Linux paths: - files: sites/mydrupalsite.com/files - custom: /my/custom/path command: sql: sync: options: no-dump: true dev: root: /path/to/docroot uri: https://dev.example.com","title":"Docker Compose and other transports"},{"location":"site-aliases/#example-of-rsync-with-exclude-paths","text":"Note that most options typically passed to rsync via drush rsync are \"passthrough options\", which is to say they appear after the -- separator on the command line. Passthrough options are actually arguments, and it is not possible to set default arguments in an alias record. The drush rsync command does support two options, --mode and --exclude-paths , which are interpreted directly by Drush. Default values for these options may be specified in an alias record, as shown below. dev: root: /path/to/docroot uri: https://dev.example.com command: core: rsync: options: mode: rlptz exclude-paths: 'css:imagecache:ctools:js:tmp:php:styles'","title":"Example of rsync with exclude-paths"},{"location":"usage/","text":"Drush can be run in your shell by typing drush from within your project root directory or anywhere within Drupal. $ drush [options] <command> [argument1] [argument2] Use the help command to get a list of available options and commands: $ drush help pm:list For even more documentation, use the topic command : $ drush topic Using the --uri option and --root options. \u00b6 For multi-site installations, use a site alias or the --uri option to target a particular site. $ drush --uri=http://example.com pm:enable If you are outside the Composer project and not using a site alias, you need to specify --root and --uri for Drush to locate and bootstrap the right Drupal site. Site Aliases \u00b6 Drush lets you run commands on a remote server. Once defined, aliases can be referenced with the @ nomenclature, i.e. # Run pending updates on staging site. $ drush @staging updatedb # Synchronize staging files to production $ drush rsync @staging:%files/ @live:%files # Synchronize database from production to local, excluding the cache table $ drush sql:sync --structure-tables-key = custom @live @self See Site aliases for more information.","title":"Usage"},{"location":"usage/#using-the-uri-option-and-root-options","text":"For multi-site installations, use a site alias or the --uri option to target a particular site. $ drush --uri=http://example.com pm:enable If you are outside the Composer project and not using a site alias, you need to specify --root and --uri for Drush to locate and bootstrap the right Drupal site.","title":"Using the --uri option and --root options."},{"location":"usage/#site-aliases","text":"Drush lets you run commands on a remote server. Once defined, aliases can be referenced with the @ nomenclature, i.e. # Run pending updates on staging site. $ drush @staging updatedb # Synchronize staging files to production $ drush rsync @staging:%files/ @live:%files # Synchronize database from production to local, excluding the cache table $ drush sql:sync --structure-tables-key = custom @live @self See Site aliases for more information.","title":"Site Aliases"},{"location":"using-drush-configuration/","text":"Drush Configuration \u00b6 Drush configuration is useful to cut down on typing out lengthy and repetitive command line options, and to avoid mistakes. Directories and Discovery \u00b6 drush.yml files are discovered as below, in order of precedence: Drupal site folder (e.g. sites/{example.com}/drush.yml ). default site does not yet work . sites/all/drush , WEBROOT/drush , or PROJECTROOT/drush . In any location, as specified by the --config option. User's .drush folder (i.e. ~/.drush/drush.yml ). System-wide configuration folder (e.g. /etc/drush/drush.yml or C:\\ProgramData\\Drush\\drush.yml ). If a configuration file is found in any of the above locations, it will be loaded and merged with other configuration files in the search list. Run drush status --fields=drush-conf to see all discovered config files. Environment variables \u00b6 Your Drush config file may reference environment variables using a syntax like ${env.HOME} . For example see the drush.paths examples below. An alternative way to populate Drush configuration is to define environment variables that correspond to config keys. For example, to populate the options.uri config item, create an environment variable DRUSH_OPTIONS_URI=http://example.com . As you can see, variable names should be uppercased, prefixed with DRUSH_ , and periods replaced with dashes. Config examples \u00b6 Specify config files to load \u00b6 drush: paths: config: # Load any personal config files. Is silently skipped if not found. Filename must be drush.yml - ${env.HOME}/.drush/config/drush.yml The value may be path to a file, or to a directory containing drush.yml file(s). View discovered config paths: drush status --fields=drush-conf --format=yaml Specify folders to search for Drush command files. \u00b6 These locations are always merged with include paths defined on the command line or in other configuration files. On the command line, paths may be separated by a colon : on Unix-based systems or a semi-colon ; on Windows, or multiple --include options may be provided. Drush 8 and earlier did a deep search in ~/.drush and /usr/share/drush/commands when loading command files, so we mimic that here as an example. drush: include: - '${env.HOME}/.drush/commands' - /usr/share/drush/commands View all loaded commands: drush list Specify the folders to search for Drush alias files (*.site.yml). \u00b6 These locations are always merged with alias paths defined on the command line or in other configuration files. On the command line, paths may be separated by a colon : on Unix-based systems or a semi-colon ; on Windows, or multiple --alias-path options may be provided. Note that Drush 8 and earlier did a deep search in ~/.drush and /etc/drush when loading alias files. drush: paths: alias-path: - '${env.HOME}/.drush/sites' - /etc/drush/sites - View all loaded site aliases: drush site:alias Cache directory \u00b6 Specify a folder where Drush should store its file based caches. If unspecified, defaults to $HOME/.drush . drush: cache-directory: /tmp/.drush Backup directory \u00b6 Specify a folder where Drush should store backup files, including temporary sql dump files created during sql:sync . If unspecified, defaults to $HOME/drush-backups . drush: backup-dir: /tmp/drush-backups Global options \u00b6 options: # Specify the base_url that should be used when generating links. uri: 'http://example.com/subdir' # Specify your Drupal core base directory (useful if you use symlinks). root: '/home/USER/workspace/drupal' # Enable verbose mode. verbose: true Command-specific options \u00b6 command: sql: dump: options: # Omit cache and similar tables (including during a sql:sync). structure-tables-key: common php: script: options: # Additional folders to search for scripts. script-path: 'sites/all/scripts:profiles/myprofile/scripts' core: rsync: options: # Ensure all rsync commands use verbose output. verbose: true site: install: options: # Set a predetermined username and password when using site:install. account-name: 'alice' account-pass: 'secret' Non-options \u00b6 sql: # An explicit list of tables which should be included in sql-dump and sql-sync. tables: common: - user - permissions - role_permissions - role # List of tables whose *data* is skipped by the 'sql-dump' and 'sql-sync' # commands when the \"--structure-tables-key=common\" option is provided. # You may add specific tables to the existing array or add a new element. structure-tables: common: - cache - 'cache_*' - history - 'search_*' - 'sessions' - 'watchdog' # List of tables to be omitted entirely from SQL dumps made by the 'sql-dump' # and 'sql-sync' commands when the \"--skip-tables-key=common\" option is # provided on the command line. This is useful if your database contains # non-Drupal tables used by some other application or during a migration for # example. You may add new tables to the existing array or add a new element. skip-tables: common: - 'migration_*' ssh: # Specify options to pass to ssh. The default is to prohibit # password authentication, and is included here, so you may add additional # parameters without losing the default configuration. options: '-o PasswordAuthentication=no' # This string is valid for Bash shell. Override in case you need something different. See https://github.com/drush-ops/drush/issues/3816. pipefail: 'set -o pipefail; ' notify: # Notify when command takes more than 30 seconds. duration: 30 # Specify a command to run. Defaults to Notification Center (OSX) or libnotify (Linux) cmd: /path/to/program # See https://github.com/drush-ops/drush/blob/11.x/src/Commands/core/NotifyCommands.php for more settings. xh: # Start profiling via xhprof/tideways and show a link to the run report. link: http://xhprof.local # See https://github.com/drush-ops/drush/blob/11.x/src/Commands/core/XhprofCommands.php for more settings. profile-builtins: true profile-cpu: false profile-memory: false Misc \u00b6 If you are authoring a commandfile and wish to access the user's configuration, see Command Authoring . Setting boolean options broke with Symfony 3 . This will be fixed in a future release. Version-specific configuration. Limit the version of Drush that will load a configuration file by placing the Drush major version number in the filename, e.g. drush10.yml . The Drush configuration system has been factored out of Drush and shared with the world at https://github.com/consolidation/config . Feel free to use it for your projects. Lots more usage information is there.","title":"Drush configuration"},{"location":"using-drush-configuration/#drush-configuration","text":"Drush configuration is useful to cut down on typing out lengthy and repetitive command line options, and to avoid mistakes.","title":"Drush Configuration"},{"location":"using-drush-configuration/#directories-and-discovery","text":"drush.yml files are discovered as below, in order of precedence: Drupal site folder (e.g. sites/{example.com}/drush.yml ). default site does not yet work . sites/all/drush , WEBROOT/drush , or PROJECTROOT/drush . In any location, as specified by the --config option. User's .drush folder (i.e. ~/.drush/drush.yml ). System-wide configuration folder (e.g. /etc/drush/drush.yml or C:\\ProgramData\\Drush\\drush.yml ). If a configuration file is found in any of the above locations, it will be loaded and merged with other configuration files in the search list. Run drush status --fields=drush-conf to see all discovered config files.","title":"Directories and Discovery"},{"location":"using-drush-configuration/#environment-variables","text":"Your Drush config file may reference environment variables using a syntax like ${env.HOME} . For example see the drush.paths examples below. An alternative way to populate Drush configuration is to define environment variables that correspond to config keys. For example, to populate the options.uri config item, create an environment variable DRUSH_OPTIONS_URI=http://example.com . As you can see, variable names should be uppercased, prefixed with DRUSH_ , and periods replaced with dashes.","title":"Environment variables"},{"location":"using-drush-configuration/#config-examples","text":"","title":"Config examples"},{"location":"using-drush-configuration/#specify-config-files-to-load","text":"drush: paths: config: # Load any personal config files. Is silently skipped if not found. Filename must be drush.yml - ${env.HOME}/.drush/config/drush.yml The value may be path to a file, or to a directory containing drush.yml file(s). View discovered config paths: drush status --fields=drush-conf --format=yaml","title":"Specify config files to load"},{"location":"using-drush-configuration/#specify-folders-to-search-for-drush-command-files","text":"These locations are always merged with include paths defined on the command line or in other configuration files. On the command line, paths may be separated by a colon : on Unix-based systems or a semi-colon ; on Windows, or multiple --include options may be provided. Drush 8 and earlier did a deep search in ~/.drush and /usr/share/drush/commands when loading command files, so we mimic that here as an example. drush: include: - '${env.HOME}/.drush/commands' - /usr/share/drush/commands View all loaded commands: drush list","title":"Specify folders to search for Drush command files."},{"location":"using-drush-configuration/#specify-the-folders-to-search-for-drush-alias-files-siteyml","text":"These locations are always merged with alias paths defined on the command line or in other configuration files. On the command line, paths may be separated by a colon : on Unix-based systems or a semi-colon ; on Windows, or multiple --alias-path options may be provided. Note that Drush 8 and earlier did a deep search in ~/.drush and /etc/drush when loading alias files. drush: paths: alias-path: - '${env.HOME}/.drush/sites' - /etc/drush/sites - View all loaded site aliases: drush site:alias","title":"Specify the folders to search for Drush alias files (*.site.yml)."},{"location":"using-drush-configuration/#cache-directory","text":"Specify a folder where Drush should store its file based caches. If unspecified, defaults to $HOME/.drush . drush: cache-directory: /tmp/.drush","title":"Cache directory"},{"location":"using-drush-configuration/#backup-directory","text":"Specify a folder where Drush should store backup files, including temporary sql dump files created during sql:sync . If unspecified, defaults to $HOME/drush-backups . drush: backup-dir: /tmp/drush-backups","title":"Backup directory"},{"location":"using-drush-configuration/#global-options","text":"options: # Specify the base_url that should be used when generating links. uri: 'http://example.com/subdir' # Specify your Drupal core base directory (useful if you use symlinks). root: '/home/USER/workspace/drupal' # Enable verbose mode. verbose: true","title":"Global options"},{"location":"using-drush-configuration/#command-specific-options","text":"command: sql: dump: options: # Omit cache and similar tables (including during a sql:sync). structure-tables-key: common php: script: options: # Additional folders to search for scripts. script-path: 'sites/all/scripts:profiles/myprofile/scripts' core: rsync: options: # Ensure all rsync commands use verbose output. verbose: true site: install: options: # Set a predetermined username and password when using site:install. account-name: 'alice' account-pass: 'secret'","title":"Command-specific options"},{"location":"using-drush-configuration/#non-options","text":"sql: # An explicit list of tables which should be included in sql-dump and sql-sync. tables: common: - user - permissions - role_permissions - role # List of tables whose *data* is skipped by the 'sql-dump' and 'sql-sync' # commands when the \"--structure-tables-key=common\" option is provided. # You may add specific tables to the existing array or add a new element. structure-tables: common: - cache - 'cache_*' - history - 'search_*' - 'sessions' - 'watchdog' # List of tables to be omitted entirely from SQL dumps made by the 'sql-dump' # and 'sql-sync' commands when the \"--skip-tables-key=common\" option is # provided on the command line. This is useful if your database contains # non-Drupal tables used by some other application or during a migration for # example. You may add new tables to the existing array or add a new element. skip-tables: common: - 'migration_*' ssh: # Specify options to pass to ssh. The default is to prohibit # password authentication, and is included here, so you may add additional # parameters without losing the default configuration. options: '-o PasswordAuthentication=no' # This string is valid for Bash shell. Override in case you need something different. See https://github.com/drush-ops/drush/issues/3816. pipefail: 'set -o pipefail; ' notify: # Notify when command takes more than 30 seconds. duration: 30 # Specify a command to run. Defaults to Notification Center (OSX) or libnotify (Linux) cmd: /path/to/program # See https://github.com/drush-ops/drush/blob/11.x/src/Commands/core/NotifyCommands.php for more settings. xh: # Start profiling via xhprof/tideways and show a link to the run report. link: http://xhprof.local # See https://github.com/drush-ops/drush/blob/11.x/src/Commands/core/XhprofCommands.php for more settings. profile-builtins: true profile-cpu: false profile-memory: false","title":"Non-options"},{"location":"using-drush-configuration/#misc","text":"If you are authoring a commandfile and wish to access the user's configuration, see Command Authoring . Setting boolean options broke with Symfony 3 . This will be fixed in a future release. Version-specific configuration. Limit the version of Drush that will load a configuration file by placing the Drush major version number in the filename, e.g. drush10.yml . The Drush configuration system has been factored out of Drush and shared with the world at https://github.com/consolidation/config . Feel free to use it for your projects. Lots more usage information is there.","title":"Misc"},{"location":"contribute/CONTRIBUTING/","text":"Drush is built by people like you! Please join us . Git and Pull requests \u00b6 Contributions are submitted, reviewed, and accepted using GitHub pull requests. The latest changes are in the 11.x branch. PR's should initially target this branch. Try to make clean commits that are easily readable (including descriptive commit messages!) See the test-specific README.md for instructions on running the test suite. Test before you push. Get familiar with Unish, our test suite. Optionally run tests in the provided Docker containers. We maintain branches named 11.x, 10.x, etc. These are release branches. From these branches, we make new tags for patch and minor versions. Development Environment \u00b6 You may choose to use the DDEV for a standardized development environment . See composer run-script -l for a list of helper scripts. Coding style \u00b6 Do write comments. You don't have to comment every line, but if you come up with something that's a bit complex/weird, just leave a comment. Bear in mind that you will probably leave the project at some point and that other people will read your code. Undocumented huge amounts of code are nearly worthless! We use PSR-2 in the /src directory. Drupal's coding standards are still used in the includes directory (deprecated code). Keep it compatible. Do not introduce changes to the public API, or configurations too casually. Don't make incompatible changes without good reasons! Run composer cs to check the project for coding style issues and run composer cbf to fix them automatically where possible. These scripts use PHP_CodeSniffer in background. Documentation \u00b6 The docs are on our web site . You may also read these from within Drush, with the drush topic command. Documentation should be kept up-to-date. This means, whenever you add a new API method, add a new hook or change the database model, pack the relevant changes to the docs in the same pull request.","title":"Guidelines"},{"location":"contribute/CONTRIBUTING/#git-and-pull-requests","text":"Contributions are submitted, reviewed, and accepted using GitHub pull requests. The latest changes are in the 11.x branch. PR's should initially target this branch. Try to make clean commits that are easily readable (including descriptive commit messages!) See the test-specific README.md for instructions on running the test suite. Test before you push. Get familiar with Unish, our test suite. Optionally run tests in the provided Docker containers. We maintain branches named 11.x, 10.x, etc. These are release branches. From these branches, we make new tags for patch and minor versions.","title":"Git and Pull requests"},{"location":"contribute/CONTRIBUTING/#development-environment","text":"You may choose to use the DDEV for a standardized development environment . See composer run-script -l for a list of helper scripts.","title":"Development Environment"},{"location":"contribute/CONTRIBUTING/#coding-style","text":"Do write comments. You don't have to comment every line, but if you come up with something that's a bit complex/weird, just leave a comment. Bear in mind that you will probably leave the project at some point and that other people will read your code. Undocumented huge amounts of code are nearly worthless! We use PSR-2 in the /src directory. Drupal's coding standards are still used in the includes directory (deprecated code). Keep it compatible. Do not introduce changes to the public API, or configurations too casually. Don't make incompatible changes without good reasons! Run composer cs to check the project for coding style issues and run composer cbf to fix them automatically where possible. These scripts use PHP_CodeSniffer in background.","title":"Coding style"},{"location":"contribute/CONTRIBUTING/#documentation","text":"The docs are on our web site . You may also read these from within Drush, with the drush topic command. Documentation should be kept up-to-date. This means, whenever you add a new API method, add a new hook or change the database model, pack the relevant changes to the docs in the same pull request.","title":"Documentation"},{"location":"contribute/unish/","text":"Drush's test suite (aka Unish) is based on PHPUnit . In order to maintain high quality, our tests are run on every push. See CircleCi . Usage \u00b6 git clone https://github.com/drush-ops/drush.git cd drush composer install Review the configuration settings in tests/phpunit.xml.dist . If customization is needed, copy phpunit.xml.dist to phpunit.xml and edit away. Run all test suites: composer test DDEV \u00b6 11.0+ Drush's own tests may be run within provided Docker containers via DDEV Start containers: ddev start Run a test: ddev exec drupal composer functional -- --filter testUserRole See the DDEV's XDebug docs for help on enabling Xdebug. Advanced usage \u00b6 Run only one test suite composer unit composer integration composer functional Run only tests matching a regex: composer functional -- --filter testUserRole Skip slow tests (usually those with network usage): composer functional -- --exclude-group slow XML results: composer functional -- --log-junit results.xml Ad-hoc testing with the SUT composer sut:si . See composer.json for details . UNISH_DIRTY=1 composer functional -- --filter testUserRole ./drush @sut.dev status About the Test Suites \u00b6 Unit tests operate on functions that take values and return results without creating side effects. No database connection is required to run these tests, and no Drupal site is set up. Integration tests set up a test dependency injection container and operate by calling the Symfony Application APIs directly. A Drupal site called the System Under Test is set up and used for the tests. The SUT is set up and installed only once, and then is re-used for all tests. Integration tests therefore cannot make destructive changes to the SUT database. Also, Drupal is bootstrapped only once (always using the standard Drupal kernel, never the install or update kernel). This means that all commands run at @bootstrap full , and it is not possible to test loading different Drush configuration files and so on. It is not possible to test argument / option parsing. The shutdown and error handlers are not installed, so PHP deprecation warnings will be evidenced in the integration tests. Functional tests operate by exec ing the Drush executable. All functional tests therefore run in their own separate processes. The Drupal System Under Test is set up every time it is needed by any functional test. It is therefore okay if a functional test changes the state of the SUT. The codebase is re-used, so no destructive changes should be made to the code. Drush Test Traits \u00b6 Drush provides test traits that may be used to test your own Drush extensions. Adding the traits varies slightly depending how you package your Drush extension. An extension that ships inside a contributed module - DevelCommandsTest for an example. More examples are SchedulerDrushTest and Views Bulk Operations . Remember to add drush/drush to your module's composer.json ( require-dev section). A standalone Drush extension or one that ships inside a custom module - example drush extension Once you have included the Drush Test Traits, you will be able to write simple tests that call your extension's commands and makes assertions against the output. public function testMyCommand () { $this -> drush ( 'my:command' , [ 'param' ], [ 'flag' => 'value' ]); $this -> assertOutputEquals ( 'The parameter is \"param\" and the \"flag\" option is \"value\"' ); }","title":"Unish"},{"location":"contribute/unish/#usage","text":"git clone https://github.com/drush-ops/drush.git cd drush composer install Review the configuration settings in tests/phpunit.xml.dist . If customization is needed, copy phpunit.xml.dist to phpunit.xml and edit away. Run all test suites: composer test","title":"Usage"},{"location":"contribute/unish/#ddev","text":"11.0+ Drush's own tests may be run within provided Docker containers via DDEV Start containers: ddev start Run a test: ddev exec drupal composer functional -- --filter testUserRole See the DDEV's XDebug docs for help on enabling Xdebug.","title":"DDEV"},{"location":"contribute/unish/#advanced-usage","text":"Run only one test suite composer unit composer integration composer functional Run only tests matching a regex: composer functional -- --filter testUserRole Skip slow tests (usually those with network usage): composer functional -- --exclude-group slow XML results: composer functional -- --log-junit results.xml Ad-hoc testing with the SUT composer sut:si . See composer.json for details . UNISH_DIRTY=1 composer functional -- --filter testUserRole ./drush @sut.dev status","title":"Advanced usage"},{"location":"contribute/unish/#about-the-test-suites","text":"Unit tests operate on functions that take values and return results without creating side effects. No database connection is required to run these tests, and no Drupal site is set up. Integration tests set up a test dependency injection container and operate by calling the Symfony Application APIs directly. A Drupal site called the System Under Test is set up and used for the tests. The SUT is set up and installed only once, and then is re-used for all tests. Integration tests therefore cannot make destructive changes to the SUT database. Also, Drupal is bootstrapped only once (always using the standard Drupal kernel, never the install or update kernel). This means that all commands run at @bootstrap full , and it is not possible to test loading different Drush configuration files and so on. It is not possible to test argument / option parsing. The shutdown and error handlers are not installed, so PHP deprecation warnings will be evidenced in the integration tests. Functional tests operate by exec ing the Drush executable. All functional tests therefore run in their own separate processes. The Drupal System Under Test is set up every time it is needed by any functional test. It is therefore okay if a functional test changes the state of the SUT. The codebase is re-used, so no destructive changes should be made to the code.","title":"About the Test Suites"},{"location":"contribute/unish/#drush-test-traits","text":"Drush provides test traits that may be used to test your own Drush extensions. Adding the traits varies slightly depending how you package your Drush extension. An extension that ships inside a contributed module - DevelCommandsTest for an example. More examples are SchedulerDrushTest and Views Bulk Operations . Remember to add drush/drush to your module's composer.json ( require-dev section). A standalone Drush extension or one that ships inside a custom module - example drush extension Once you have included the Drush Test Traits, you will be able to write simple tests that call your extension's commands and makes assertions against the output. public function testMyCommand () { $this -> drush ( 'my:command' , [ 'param' ], [ 'flag' => 'value' ]); $this -> assertOutputEquals ( 'The parameter is \"param\" and the \"flag\" option is \"value\"' ); }","title":"Drush Test Traits"},{"location":"examples/ArtCommands.php/","text":"<? php namespace Drush\\Commands ; use Consolidation\\AnnotatedCommand\\AnnotationData ; use Consolidation\\AnnotatedCommand\\CommandData ; use Consolidation\\AnnotatedCommand\\Events\\CustomEventAwareInterface ; use Consolidation\\AnnotatedCommand\\Events\\CustomEventAwareTrait ; use Consolidation\\OutputFormatters\\StructuredData\\RowsOfFields ; use Symfony\\Component\\Console\\Input\\InputInterface ; use Symfony\\Component\\Console\\Output\\OutputInterface ; use Symfony\\Component\\Console\\Style\\SymfonyStyle ; use Drush\\Style\\DrushStyle ; use Drush\\Utils\\StringUtils ; /** * Run these commands using the --include option - e.g. `drush --include=/path/to/drush/examples art sandwich` * * For an example of a Drupal module implementing commands, see * - http://cgit.drupalcode.org/devel/tree/devel_generate/src/Commands * - http://cgit.drupalcode.org/devel/tree/devel_generate/drush.services.yml * * This file is a good example of the first of those bullets (a commandfile) but * since it isn't part of a module, it does not implement drush.services.yml. * * See [Drush Test Traits](https://github.com/drush-ops/drush/blob/10.x/docs/contribute/unish.md#about-the-test-suites) for info on testing Drush commands. */ class ArtCommands extends DrushCommands implements CustomEventAwareInterface { use CustomEventAwareTrait ; /** @var string[] */ protected $arts ; /** * Show a fabulous picture. * * @command artwork:show * @aliases arts * @param $art The name of the art to display * @usage drush art sandwich * Show a marvelous picture of a sandwich with pickles. */ public function art ( $art = '' ) { $data = $this -> getArt (); $name = $data [ $art ][ 'name' ]; $description = $data [ $art ][ 'description' ]; $path = $data [ $art ][ 'path' ]; $msg = dt ( 'Okay. Here is {art}: {description}' , [ 'art' => $name , 'description' => $description ] ); $this -> output () -> writeln ( \" \\n \" . $msg . \" \\n \" ); $this -> printFile ( $path ); } /** * Show a table of information about available art. * * @command artwork:list * @aliases artls * @field-labels * name: Name * description: Description * path: Path * @default-fields name,description * * @filter-default-field name * @return \\Consolidation\\OutputFormatters\\StructuredData\\RowsOfFields */ public function listArt ( $options = [ 'format' => 'table' ]) { $data = $this -> getArt (); return new RowsOfFields ( $data ); } /** * Commandfiles may also add topics. These will appear in * the list of topics when `drush topic` is executed. * To view the topic below, run `drush --include=/full/path/to/examples topic` */ /** * Ruminations on the true meaning and philosophy of artwork. * * @command artwork:explain * @hidden * @topic */ public function ruminate () { self :: printFile ( __DIR__ . '/art-topic.md' ); } /** * Return the available built-in art. Any Drush commandfile may provide * more art by implementing a 'drush-art' on-event hook. This on-event * hook is defined in the 'findArt' method beolw. * * @hook on-event drush-art */ public function builtInArt () { return [ 'drush' => [ 'name' => 'Drush' , 'description' => 'The Drush logo.' , 'path' => __DIR__ . '/art/drush-nocolor.txt' , ], 'sandwich' => [ 'name' => 'Sandwich' , 'description' => 'A tasty meal with bread often consumed at lunchtime.' , 'path' => __DIR__ . '/art/sandwich-nocolor.txt' , ], ]; } /** * @hook interact artwork:show */ public function interact ( InputInterface $input , OutputInterface $output , AnnotationData $annotationData ) { $io = new DrushStyle ( $input , $output ); // If the user did not specify any artwork, then prompt for one. $art = $input -> getArgument ( 'art' ); if ( empty ( $art )) { $data = $this -> getArt (); $selections = $this -> convertArtListToKeyValue ( $data ); $selection = $io -> choice ( 'Select art to display' , $selections ); $input -> setArgument ( 'art' , $selection ); } } /** * @hook validate artwork:show */ public function artValidate ( CommandData $commandData ) { $art = $commandData -> input () -> getArgument ( 'art' ); $data = $this -> getArt (); if ( ! isset ( $data [ $art ])) { throw new \\Exception ( dt ( 'I do not have any art called \"{name}\".' , [ 'name' => $art ])); } } /** * Get a list of available artwork. Cache result for future fast access. */ protected function getArt () { if ( ! isset ( $this -> arts )) { $this -> arts = $this -> findArt (); } return $this -> arts ; } /** * Use custom defined on-event hook 'drush-art' to find available artwork. */ protected function findArt () { $arts = []; $handlers = $this -> getCustomEventHandlers ( 'drush-art' ); foreach ( $handlers as $handler ) { $handlerResult = $handler (); $arts = array_merge ( $arts , $handlerResult ); } return $arts ; } /** * Given a list of artwork, converte to a 'key' => 'Name: Description' array. * @param array $data * @return array */ protected function convertArtListToKeyValue ( $data ) { $result = []; foreach ( $data as $key => $item ) { $result [ $key ] = $item [ 'name' ] . ': ' . $item [ 'description' ]; } return $result ; } }","title":"ArtCommands.php"},{"location":"examples/PolicyCommands.php/","text":"<? php namespace Drush\\Commands ; use Consolidation\\AnnotatedCommand\\CommandData ; use Drush\\Commands\\DrushCommands ; use Symfony\\Component\\Console\\Input\\InputOption ; /** * Load this commandfile using the --include option - e.g. `drush --include=/path/to/drush/examples` * * See [Drush Test Traits](https://github.com/drush-ops/drush/blob/10.x/docs/contribute/unish.md#about-the-test-suites) for info on testing Drush commands. */ class PolicyCommands extends DrushCommands { /** * Prevent catastrophic braino. Note that this file has to be local to the * machine that initiates the sql:sync command. * * @hook validate sql:sync * @throws \\Exception */ public function sqlSyncValidate ( CommandData $commandData ) { if ( $commandData -> input () -> getArgument ( 'destination' ) == '@prod' ) { throw new \\Exception ( dt ( 'Per !file, you may never overwrite the production database.' , [ '!file' => __FILE__ ])); } } /** * Limit rsync operations to production site. * * @hook validate core:rsync */ public function rsyncValidate ( CommandData $commandData ) { if ( preg_match ( \"/^@prod/\" , $commandData -> input () -> getArgument ( 'destination' ))) { throw new \\Exception ( dt ( 'Per !file, you may never rsync to the production site.' , [ '!file' => __FILE__ ])); } } /** * Unauthorized may not execute updates. * * @hook validate updatedb */ public function validateUpdateDb ( CommandData $commandData ) { if ( ! $commandData -> input () -> getOption ( 'secret' ) == 'mysecret' ) { throw new \\Exception ( dt ( 'UpdateDb command requires a secret token per site policy.' )); } } /** * @hook option updatedb * @option secret A required token else user may not run updatedb command. */ public function optionsetUpdateDb ( $options = [ 'secret' => self :: REQ ]) { } }","title":"PolicyCommands.php"},{"location":"examples/SiteAliasAlterCommands.php/","text":"<? php namespace Drush\\Commands ; use Consolidation\\AnnotatedCommand\\AnnotationData ; use Consolidation\\SiteAlias\\SiteAliasManagerAwareInterface ; use Consolidation\\SiteAlias\\SiteAliasManagerAwareTrait ; use Symfony\\Component\\Console\\Input\\InputInterface ; /** * Load this example by using the --include option - e.g. `drush --include=/path/to/drush/examples` */ class SiteAliasAlterCommands extends DrushCommands implements SiteAliasManagerAwareInterface { use SiteAliasManagerAwareTrait ; /** * A few example alterations to site aliases. * * @hook pre-init * * * @param \\Symfony\\Component\\Console\\Input\\InputInterface $input * @param \\Consolidation\\AnnotatedCommand\\AnnotationData $annotationData */ public function alter ( InputInterface $input , AnnotationData $annotationData ) { $self = $this -> siteAliasManager () -> getSelf (); if ( $self -> isRemote ()) { // Always pass along ssh keys. if ( ! $self -> has ( 'ssh.options' )) { // Don't edit the alias - edit the general config service instead. $this -> getConfig () -> set ( 'ssh.options' , '-o ForwardAgent=yes' ); } // Change the SSH user. $input -> setOption ( 'remote-user' , 'mw2' ); // Test to see if specific environment really exists in wildcard // aliases, but only if the target is a specific host. $host = $self -> get ( 'host' ); if ( preg_match ( '#\\.myserver.com$#' , $host )) { $ip = gethostbyname ( $host ); // If the return value of gethostbyname equals its input parameter, // that indicates failure. if ( $host == $ip ) { $aliasName = $self -> name (); throw new \\Exception ( \"The alias $aliasName refers to an environment that does not exist.\" ); } } } } }","title":"SiteAliasAlterCommands.php"},{"location":"examples/SyncViaHttpCommands.php/","text":"<? php namespace Drush\\Commands ; use Consolidation\\AnnotatedCommand\\CommandData ; use Drush\\Commands\\DrushCommands ; use Drush\\Drush ; use Drush\\Exec\\ExecTrait ; use Symfony\\Component\\Filesystem\\Filesystem ; /** * Load this commandfile using the --include option - e.g. `drush --include=/path/to/drush/examples` */ class SyncViaHttpCommands extends DrushCommands { /** * When a hook extends a command with additional options, it must * implement declare those option(s) in a @hook option like this one. Doing so will add * the option to the help text for the modified command, and will also * allow the new option to be specified on the command line. Without * this, Drush will fail with an error when a user attempts to use * an unknown option. * * @hook option sql-sync * @option http-sync Copy the database via http instead of rsync. Value is the url that the existing database dump can be found at. * @option http-sync-user Username for the protected directory containing the sql dump. * @option http-sync-password Password for the same directory. */ public function optionsetSqlSync () { } /** * During the pre hook, determine if the http-sync option has been * specified. If it has been, then disable the normal ssh + rsync * dump-and-transfer that sql-sync usually does, and transfer the * database dump via an http download. * * @hook pre-command sql-sync */ public function preSqlSync ( CommandData $commandData ) { $sql_dump_download_url = $commandData -> input () -> getOption ( 'http-sync' ); if ( ! empty ( $sql_dump_download_url )) { $user = $commandData -> input () -> getOption ( 'http-sync-user' ); $password = $commandData -> input () -> getOption ( 'http-sync-password' ); $source_dump_file = $this -> downloadFile ( $sql_dump_download_url , $user , $password ); $commandData -> input () -> setOption ( 'target-dump' , $source_dump_file ); $commandData -> input () -> setOption ( 'no-dump' , true ); $commandData -> input () -> setOption ( 'no-sync' , true ); } } /** * Downloads a file. * * Optionally uses user authentication, using either wget or curl, as available. */ protected function downloadFile ( $url , $user = false , $password = false , $destination = false , $overwrite = true ) { static $use_wget ; if ( $use_wget === null ) { $use_wget = ExecTrait :: programExists ( 'wget' ); } $destination_tmp = drush_tempnam ( 'download_file' ); if ( $use_wget ) { $args = [ 'wget' , '-q' , '--timeout=30' ]; if ( $user && $password ) { $args = array_merge ( $args , [ \"--user= $user \" , \"--password= $password \" , '-O' , $destination_tmp , $url ]); } else { $args = array_merge ( $args , [ '-O' , $destination_tmp , $url ]); } } else { $args = [ 'curl' , '-s' , '-L' , '--connect-timeout 30' ]; if ( $user && $password ) { $args = array_merge ( $args , [ '--user' , \" $user : $password \" , '-o' , $destination_tmp , $url ]); } else { $args = array_merge ( $args , [ '-o' , $destination_tmp , $url ]); } } $process = Drush :: process ( $args ); $process -> mustRun (); if ( ! Drush :: simulate ()) { if ( ! drush_file_not_empty ( $destination_tmp ) && $file = @ file_get_contents ( $url )) { @ file_put_contents ( $destination_tmp , $file ); } if ( ! drush_file_not_empty ( $destination_tmp )) { // Download failed. throw new \\Exception ( dt ( \"The URL !url could not be downloaded.\" , [ '!url' => $url ])); } } if ( $destination ) { $fs = new Filesystem (); $fs -> rename ( $destination_tmp , $destination , $overwrite ); return $destination ; } return $destination_tmp ; } }","title":"SyncViaHttpCommands.php"},{"location":"examples/XkcdCommands.php/","text":"<? php namespace Drush\\Commands ; use Drush\\Attributes\\Command ; use Drush\\Attributes\\Help ; use Drush\\Attributes\\Option ; use Drush\\Attributes\\Argument ; use Drush\\Attributes\\Usage ; use Drush\\Exec\\ExecTrait ; /** * Run these commands using the --include option - e.g. `drush --include=/path/to/drush/examples xkcd` * * For an example of a Drush extension with tests for Drush 9 and Drush 8: * - https://github.com/drush-ops/example-drush-extension */ class XkcdCommands extends DrushCommands { use ExecTrait ; /** * Retrieve and display xkcd cartoons. * * @command xkcd:fetch * @param $search Optional argument to retrieve the cartoons matching an index number, keyword search or \"random\". If omitted the latest cartoon will be retrieved. * @option image-viewer Command to use to view images (e.g. xv, firefox). Defaults to \"display\" (from ImageMagick). * @option google-custom-search-api-key Google Custom Search API Key, available from https://code.google.com/apis/console/. Default key limited to 100 queries/day globally. * @usage drush xkcd * Retrieve and display the latest cartoon. * @usage drush xkcd sandwich * Retrieve and display cartoons about sandwiches. * @usage drush xkcd 123 --image-viewer=eog * Retrieve and display cartoon #123 in eog. * @usage drush xkcd random --image-viewer=firefox * Retrieve and display a random cartoon in Firefox. * @aliases xkcd */ public function fetch ( $search = null , $options = [ 'image-viewer' => 'open' , 'google-custom-search-api-key' => 'AIzaSyDpE01VDNNT73s6CEeJRdSg5jukoG244ek' ]) { $this -> doFetch ( $search , $options ); } /** * This command uses PHP8 Attributes instead of annotations. This * is recommended for commandfiles that only need to run on PHP8+. All * Attributes provided by Drush core are listed at * https://www.drush.org/latest/api/Drush/Attributes.html */ #[Command(name: 'xkcd:fetch-attributes', aliases: ['xkcd-attributes'])] #[Argument(name: 'search', description: 'Optional argument to retrieve the cartoons matching an index number, keyword search or \"random\". If omitted the latest cartoon will be retrieved.')] #[Option(name: 'image-viewer', description: 'Command to use to view images (e.g. xv, firefox). Defaults to \"display\" (from ImageMagick).')] #[Option(name: 'google-custom-search-api-key', description: 'Google Custom Search API Key, available from https://code.google.com/apis/console/. Default key limited to 100 queries/day globally.')] #[Help(description: 'Retrieve and display xkcd cartoons (attribute variant).')] #[Usage(name: 'drush xkcd', description: 'Retrieve and display the latest cartoon')] #[Usage(name: 'drush xkcd sandwich', description: 'Retrieve and display cartoons about sandwiches.')] #[Usage(name: 'drush xkcd 123 --image-viewer=eog', description: 'Retrieve and display cartoon #123 in eog.')] #[Usage(name: 'drush xkcd random --image-viewer=firefox', description: 'Retrieve and display a random cartoon in Firefox.')] public function fetchAttributes ( $search = null , $options = [ 'image-viewer' => 'open' , 'google-custom-search-api-key' => 'AIzaSyDpE01VDNNT73s6CEeJRdSg5jukoG244ek' ]) { $this -> doFetch ( $search , $options ); } /** * @param $search * @param array $options * @throws \\Exception */ protected function doFetch ( $search , array $options ) : void { if ( empty ( $search )) { $this -> startBrowser ( 'http://xkcd.com' ); } elseif ( is_numeric ( $search )) { $this -> startBrowser ( 'http://xkcd.com/' . $search ); } elseif ( $search == 'random' ) { $xkcd_response = @ json_decode ( file_get_contents ( 'http://xkcd.com/info.0.json' )); if ( ! empty ( $xkcd_response -> num )) { $this -> startBrowser ( 'http://xkcd.com/' . rand ( 1 , $xkcd_response -> num )); } } else { // This uses an API key with a limited number of searches per. $search_response = @ json_decode ( file_get_contents ( 'https://www.googleapis.com/customsearch/v1?key=' . $options [ 'google-custom-search-api-key' ] . '&cx=012652707207066138651:zudjtuwe28q&q=' . $search )); if ( ! empty ( $search_response -> items )) { foreach ( $search_response -> items as $item ) { $this -> startBrowser ( $item -> link ); } } else { throw new \\Exception ( dt ( 'The search failed or produced no results.' )); } } } }","title":"XkcdCommands.php"},{"location":"examples/example.bashrc/","text":"# -*- mode: shell-script; mode: flyspell-prog; ispell-local-dictionary: \"american\" -*- # # Example bash aliases to improve your Drush experience with bash. # Use `drush init` to copy this file to your home directory, rename and # customize it to suit, and source it from your ~/.bashrc file. # # Creates aliases to common Drush commands that work in a global context: # # dr - drush # ddd - drush drupal-directory # ev - drush php-eval # sa - drush site-alias # sa - drush site-alias --local-only (show local site aliases) # st - drush core-status # use - drush site-set # # Aliases for Drush commands that work on the current drupal site: # # cr - drush cache-rebuild # en - drush pm-enable # pml - drush pm-list # unin - drush pm-uninstall # updb - drush updatedb # q - drush sql-query # # Provides several common shell commands to work better with Drush: # # ddd @dev - print the path to the root directory of @dev # cdd @dev - change the current working directory to @dev # lsd @dev - ls root folder of @dev # lsd %files - ls \"files\" directory of current site # lsd @dev:%devel - ls devel module directory in @dev # @dev st - drush @dev core-status # dssh @live - ssh to the remote server @live points at # gitd @live pull - run `git pull` on the drupal root of @live # # Drush site alias expansion is also done for the cpd command: # # cpd -R @site1:%files @site2:%files # # Note that the 'cpd' alias only works for local sites. Use # `drush rsync` or gitd` to move files between remote sites. # # Aliases are also possible for the following standard # commands. Uncomment their definitions below as desired. # # cd - cddl [*] # ls - lsd # cp - cpd # ssh - dssh # git - gitd # # These standard commands behave exactly the same as they always # do, unless a Drush site specification such as @dev or @live:%files # is used in one of the arguments. # Aliases for common Drush commands that work in a global context. alias dr = 'drush' alias ddd = 'drush drupal:directory' alias ev = 'drush php:eval' alias sa = 'drush site:alias' alias st = 'drush core:status' alias use = 'drush site:set' # Aliases for Drush commands that work on the current drupal site alias cr = 'drush cache:rebuild' alias en = 'drush pm:enable' alias pml = 'drush pm:list' alias unin = 'drush pm:uninstall' alias updb = 'drush updatedb' alias q = 'drush sql:query' # Overrides for standard shell commands. Uncomment to enable. Alias # cd='cdd' if you want to be able to use cd @remote to ssh to a # remote site. # alias cd='cddl' # alias ls='lsd' # alias cp='cpd' # alias ssh='dssh' # alias git='gitd' # We extend the cd command to allow convenient # shorthand notations, such as: # cd @site1 # cd %modules # cd %devel # cd @site2:%files # You must use 'cddl' instead of 'cd' if you are not using # the optional 'cd' alias from above. # This is the \"local-only\" version of the function; # see the cdd function, below, for an expanded implementation # that will ssh to the remote server when a remote site # specification is used. function cddl () { fastcddl \" $1 \" use @self } # Use this function instead of 'cddl' if you have a very large number # of alias files, and the 'cddl' function is getting too slow as a result. # This function does not automatically set your prompt to the site that # you 'cd' to, as 'cddl' does. function fastcddl () { s = \" $1 \" if [ -z \" $s \" ] then builtin cd elif [ \" ${ s : 0 : 1 } \" == \"@\" ] || [ \" ${ s : 0 : 1 } \" == \"%\" ] then d = \" $( drush drupal:directory $1 --local-only 2 >/dev/null ) \" if [ $? == 0 ] then echo \"cd $d \" ; builtin cd \" $d \" ; else t = \" $( drush site-alias $1 >/dev/null 2 >/dev/null ) \" if [ $? == 0 ] then echo \"Cannot cd to remote site $s \" else echo \"Cannot cd to $s \" fi fi else builtin cd \" $s \" ; fi } # Works just like the `cddl` shell alias above, with one additional # feature: `cdd @remote-site` works like `ssh @remote-site`, # whereas cd above will fail unless the site alias is local. If # you prefer this behavior, you can add `alias cd='cdd'` to your .bashrc function cdd () { s = \" $1 \" if [ -z \" $s \" ] then builtin cd elif [ \" ${ s : 0 : 1 } \" == \"@\" ] || [ \" ${ s : 0 : 1 } \" == \"%\" ] then d = \" $( drush drupal:directory $s 2 >/dev/null ) \" rh = \" $( drush sa ${ s %%:* } --fields = host --format = list ) \" if [ -z \" $rh \" ] then echo \"cd $d \" builtin cd \" $d \" else if [ -n \" $d \" ] then c = \"cd \\\" $d \\\" \\; bash\" drush -s ${ s %%:* } ssh --tty drush ${ s %%:* } ssh --tty else drush ssh ${ s %%:* } fi fi else builtin cd \" $s \" fi } # Allow `git @site gitcommand` as a shortcut for `cd @site; git gitcommand`. # Also works on remote sites, though. function gitd () { s = \" $1 \" if [ -n \" $s \" ] && [ ${ s : 0 : 1 } == \"@\" ] || [ ${ s : 0 : 1 } == \"%\" ] then d = \" $( drush drupal-directory $s 2 >/dev/null ) \" rh = \" $( drush sa ${ s %%:* } --fields = host --format = list ) \" if [ -n \" $rh \" ] then drush ${ s %%:* } ssh \"cd ' $d ' ; git ${ @: 2 } \" else echo cd \" $d \" \\; git \" ${ @: 2 } \" ( cd \" $d \" \"git\" \" ${ @: 2 } \" ) fi else \"git\" \" $@ \" fi } # Get a directory listing on @site or @site:%files, etc, for local or remote sites. function lsd () { p =() r = for a in \" $@ \" ; do if [ ${ a : 0 : 1 } == \"@\" ] || [ ${ a : 0 : 1 } == \"%\" ] then p [ ${# p [@] } ]= \" $( drush drupal:directory $a 2 >/dev/null ) \" if [ ${ a : 0 : 1 } == \"@\" ] then rh = \" $( drush sa ${ a %:* } --fields = host --format = list ) \" if [ -n \" $rh \" ] then r = ${ a %:* } fi fi elif [ -n \" $a \" ] then p [ ${# p [@] } ]= \" $a \" fi done if [ -n \" $r \" ] then drush $r ssh 'ls \"${p[@]}\"' else \"ls\" \" ${ p [@] } \" fi } # Copy files from or to @site or @site:%files, etc; local sites only. function cpd () { p =() for a in \" $@ \" ; do if [ ${ a : 0 : 1 } == \"@\" ] || [ ${ a : 0 : 1 } == \"%\" ] then p [ ${# p [@] } ]= \" $( drush drupal:directory $a --local-only 2 >/dev/null ) \" elif [ -n \" $a \" ] then p [ ${# p [@] } ]= \" $a \" fi done \"cp\" \" ${ p [@] } \" } # This alias allows `dssh @site` to work like `drush @site ssh`. # Ssh commands, such as `dssh @site ls /tmp`, are also supported. function dssh () { d = \" $1 \" if [ ${ d : 0 : 1 } == \"@\" ] then drush \" $d \" ssh \" ${ @: 2 } \" else \"ssh\" \" $@ \" fi }","title":".bashrc"},{"location":"examples/example.drush.yml/","text":"# # A minimalist Drush config file. # See https://www.drush.org/latest/using-drush-configuration/ for lots more documentation. # # Preflight configuration. drush : include : - '${env.HOME}/.drush/commands' - /usr/share/drush/commands paths : config : # Load additional config files. Is silently skipped if not found. Filename must be drush.yml - ${env.HOME}/.drush/config/drush.yml alias-path : - '${env.HOME}/.drush/sites' - /etc/drush/sites # Global options. options : # Specify the base_url that should be used when generating links. # uri: 'http://example.com/subdir' # Command-specific options. command : sql : dump : options : # Uncomment to omit cache and similar tables (including during a sql:sync). # structure-tables-key: common # Non-options. ssh : # Specify options to pass to ssh. The default is to prohibit # password authentication, and is included here, so you may add additional # parameters without losing the default configuration. options : '-o PasswordAuthentication=no' # This string is valid for Bash shell. Override in case you need something different. See https://github.com/drush-ops/drush/issues/3816. pipefail : 'set -o pipefail; '","title":"drush.yml"},{"location":"examples/example.prompt.sh/","text":"# -*- mode: shell-script; mode: flyspell-prog; ispell-local-dictionary: \"american\" -*- # # Example PS1 prompt. # # Note: This file does a lot, and is designed for Bash. If you want to show the # currently set alias in your prompt, use the first 2 values below as an example. # This section can be used for the POWERLEVEL9K theme for Oh My Zsh. #FILE=\"${TMPDIR:-/tmp/}/drush-env-${USER}/drush-drupal-site-$$\" #POWERLEVEL9K_CUSTOM_DRUSH=\"[ -r $FILE ] && cat $FILE\" #POWERLEVEL9K_CUSTOM_DRUSH_BACKGROUND=\"green\" #POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir vcs custom_drush) # # Note that your Bash session must already have the __git_ps1 function available. # Typically this is provided by git-prompt.sh, see instructions for downloading # and including this file here: # https://github.com/git/git/blob/10.x/contrib/completion/git-prompt.sh # # Features: # # Displays Git repository and Drush alias status in your prompt. __drush_ps1 () { f = \" ${ TMPDIR :- /tmp/ } /drush-env- ${ USER } /drush-drupal-site- $$ \" if [ -f $f ] then __DRUPAL_SITE = $( cat \" $f \" ) else __DRUPAL_SITE = \" $DRUPAL_SITE \" fi # Set DRUSH_PS1_SHOWCOLORHINTS to a non-empty value and define a # __drush_ps1_colorize_alias() function for color hints in your Drush PS1 # prompt. See example.prompt.sh for an example implementation. if [ -n \" ${ __DRUPAL_SITE - } \" ] && [ -n \" ${ DRUSH_PS1_SHOWCOLORHINTS - } \" ] ; then __drush_ps1_colorize_alias fi [[ -n \" $__DRUPAL_SITE \" ]] && printf \" ${ 1 :- (%s) } \" \" $__DRUPAL_SITE \" } if [ -n \" $( type -t __git_ps1 ) \" ] && [ \" $( type -t __git_ps1 ) \" = function ] && [ \" $( type -t __drush_ps1 ) \" ] && [ \" $( type -t __drush_ps1 ) \" = function ] ; then # This line enables color hints in your Drush prompt. Modify the below # __drush_ps1_colorize_alias() to customize your color theme. DRUSH_PS1_SHOWCOLORHINTS = true # Git offers various prompt customization options as well as seen in # https://github.com/git/git/blob/10.x/contrib/completion/git-prompt.sh. # Adjust the following lines to enable the corresponding features: # GIT_PS1_SHOWDIRTYSTATE = true GIT_PS1_SHOWUPSTREAM = auto # GIT_PS1_SHOWSTASHSTATE=true # GIT_PS1_SHOWUNTRACKEDFILES=true GIT_PS1_SHOWCOLORHINTS = true # The following line sets your bash prompt according to this example: # # username@hostname ~/working-directory (git-branch)[@drush-alias] $ # # See http://ss64.com/bash/syntax-prompt.html for customization options. export PROMPT_COMMAND = '__git_ps1 \"\\u@\\h \\w\" \"$(__drush_ps1 \"[%s]\") \\\\\\$ \"' # PROMPT_COMMAND is used in the example above rather than PS1 because neither # Git nor Drush color hints are compatible with PS1. If you don't want color # hints, however, and prefer to use PS1, you can still do so by commenting out # the PROMPT_COMMAND line above and uncommenting the PS1 line below: # # export PS1='\\u@\\h \\w$(__git_ps1 \" (%s)\")$(__drush_ps1 \"[%s]\")\\$ ' __drush_ps1_colorize_alias () { if [[ -n ${ ZSH_VERSION - } ]] ; then local COLOR_BLUE = '%F{blue}' local COLOR_CYAN = '%F{cyan}' local COLOR_GREEN = '%F{green}' local COLOR_MAGENTA = '%F{magenta}' local COLOR_RED = '%F{red}' local COLOR_WHITE = '%F{white}' local COLOR_YELLOW = '%F{yellow}' local COLOR_NONE = '%f' else # Using \\[ and \\] around colors is necessary to prevent issues with # command line editing/browsing/completion. local COLOR_BLUE = '\\[\\e[94m\\]' local COLOR_CYAN = '\\[\\e[36m\\]' local COLOR_GREEN = '\\[\\e[32m\\]' local COLOR_MAGENTA = '\\[\\e[35m\\]' local COLOR_RED = '\\[\\e[91m\\]' local COLOR_WHITE = '\\[\\e[37m\\]' local COLOR_YELLOW = '\\[\\e[93m\\]' local COLOR_NONE = '\\[\\e[0m\\]' fi # Customize your color theme below. case \" $__DRUPAL_SITE \" in *.live | *.prod ) local ENV_COLOR = \" $COLOR_RED \" ;; *.stage | *.test ) local ENV_COLOR = \" $COLOR_YELLOW \" ;; *.local ) local ENV_COLOR = \" $COLOR_GREEN \" ;; * ) local ENV_COLOR = \" $COLOR_BLUE \" ;; esac __DRUPAL_SITE = \" ${ ENV_COLOR }${ __DRUPAL_SITE }${ COLOR_NONE } \" } fi","title":"prompt.sh"},{"location":"examples/example.site.yml/","text":"# # A minimalist Drush site alias file. # See https://www.drush.org/latest/site-aliases/ for lots more documentation. # # File: self.site.yml live : host : www.domain.com user : www-admin root : /other/path/to/drupal uri : http://www.example.com ssh : options : '-p 100' paths : drush-script : '/path/to/drush' env-vars : PATH : /bin:/usr/bin:/home/www-admin/.composer/vendor/bin DRUPAL_ENV : live command : site : install : options : admin-password : 'secret-secret' stage : host : stage.domain.com user : www-admin root : /other/path/to/drupal uri : http://stage.example.com","title":"site.yml"},{"location":"examples/git-bisect.example.sh/","text":"#!/usr/bin/env sh # # Git bisect is a helpful way to discover which commit an error # occurred in. This example file gives simple instructions for # using git bisect with Drush to quickly find erroneous commits # in Drush commands or Drupal modules, presuming that you can # trigger the error condition via Drush (e.g. using `drush php-eval`). # # Follow these simple steps: # # $ git bisect start # $ git bisect bad # Tell git that the current commit does not work # $ git bisect good bcadd5a # Tell drush that the commithash 12345 worked fine # $ git bisect run mytestscript.sh # # 'git bisect run' will continue to call 'git bisect good' and 'git bisect bad', # based on whether the script's exit code was 0 or 1, respectively. # # Replace 'mytestscript.sh' in the example above with a custom script that you # write yourself. Use the example script at the end of this document as a # guide. Replace the example command with one that calls the Drush command # that you would like to test, and replace the 'grep' string with a value # that appears when the error exists in the commit, but does not appear when # commit is okay. # # If you are using Drush to test Drupal or an external Drush module, use: # # $ git bisect run drush mycommand --strict=2 # # This presumes that there is one or more '[warning]' or '[error]' # messages emitted when there is a problem, and no warnings or errors # when the commit is okay. Omit '--strict=2' to ignore warnings, and # signal failure only when 'error' messages are emitted. # # If you need to test for an error condition explicitly, to find errors # that do not return any warning or error log messages on their own, you # can use the Drush php-eval command to force an error when `myfunction()` # returns FALSE. Replace 'myfunction()' with the name of an appropriate # function in your module that can be used to detect the error condition # you are looking for. # # $ git bisect run drush ev 'if(!myfunction()) { return drush_set_error(\"ERR\"); }' # drush mycommand --myoption 2 > & 1 | grep -q 'string that indicates there was a problem' if [ $? == 0 ] ; then exit 1 else exit 0 fi","title":"git-bisect.sh"},{"location":"examples/helloworld.script/","text":"<? php // // This example demonstrates how to write a drush // script. These scripts are run with the php-script command. // use Drush\\Drush ; $this -> output () -> writeln ( \"Hello world!\" ); $this -> output () -> writeln ( \"The extra options/arguments to this command were:\" ); $this -> output () -> writeln ( print_r ( $extra , true )); // // We can check which site was bootstrapped via // the '@self' alias, which is defined only if // there is a bootstrapped site. // $self = Drush :: aliasManager () -> getSelf ();; if ( ! $self -> hasRoot ()) { $this -> output () -> writeln ( 'No bootstrapped site.' ); } else { $this -> output () -> writeln ( 'The following site is bootstrapped:' ); $this -> output () -> writeln ( print_r ( $self -> legacyRecord (), true )); }","title":"Helloworld.script"},{"location":"generators/all/","text":"All commands \u00b6 Tip Press the / key to Search for a command. Or use your browser's Find in Page feature. composer controller field hook install-file javascript layout migration module module-file phpstorm-metadata render-element service-provider drush:alias-file drush:command-file drush:testing-generator entity:bundle-class entity:configuration entity:content form:config form:confirm form:simple misc:apache-virtual-host misc:html-page misc:nginx-virtual-host misc:project plugin:action plugin:block plugin:ckeditor plugin:condition plugin:constraint plugin:entity-reference-selection plugin:field:formatter plugin:field:type plugin:field:widget plugin:filter plugin:manager plugin:menu-link plugin:migrate:destination plugin:migrate:process plugin:migrate:source plugin:queue-worker plugin:rest-resource plugin:views:argument-default plugin:views:field plugin:views:style service:access-checker service:breadcrumb-builder service:cache-context service:custom service:event-subscriber service:logger service:middleware service:param-converter service:path-processor service:request-policy service:response-policy service:route-subscriber service:theme-negotiator service:twig-extension service:uninstall-validator test:browser test:kernel test:nightwatch test:unit test:webdriver theme theme:file theme:settings yml:breakpoints yml:links:action yml:links:contextual yml:links:menu yml:links:task yml:module-info yml:module-libraries yml:permissions yml:routing yml:services yml:theme-info yml:theme-libraries","title":"all"},{"location":"generators/all/#all-commands","text":"Tip Press the / key to Search for a command. Or use your browser's Find in Page feature. composer controller field hook install-file javascript layout migration module module-file phpstorm-metadata render-element service-provider drush:alias-file drush:command-file drush:testing-generator entity:bundle-class entity:configuration entity:content form:config form:confirm form:simple misc:apache-virtual-host misc:html-page misc:nginx-virtual-host misc:project plugin:action plugin:block plugin:ckeditor plugin:condition plugin:constraint plugin:entity-reference-selection plugin:field:formatter plugin:field:type plugin:field:widget plugin:filter plugin:manager plugin:menu-link plugin:migrate:destination plugin:migrate:process plugin:migrate:source plugin:queue-worker plugin:rest-resource plugin:views:argument-default plugin:views:field plugin:views:style service:access-checker service:breadcrumb-builder service:cache-context service:custom service:event-subscriber service:logger service:middleware service:param-converter service:path-processor service:request-policy service:response-policy service:route-subscriber service:theme-negotiator service:twig-extension service:uninstall-validator test:browser test:kernel test:nightwatch test:unit test:webdriver theme theme:file theme:settings yml:breakpoints yml:links:action yml:links:contextual yml:links:menu yml:links:task yml:module-info yml:module-libraries yml:permissions yml:routing yml:services yml:theme-info yml:theme-libraries","title":"All commands"},{"location":"generators/composer/","text":"composer \u00b6 Generates a composer.json file Examples \u00b6 drush generate composer . Generates a composer.json file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 composer.json","title":"composer"},{"location":"generators/composer/#composer","text":"Generates a composer.json file","title":"composer"},{"location":"generators/composer/#examples","text":"drush generate composer . Generates a composer.json file","title":"Examples"},{"location":"generators/composer/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/composer/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/composer/#aliases","text":"composer.json","title":"Aliases"},{"location":"generators/controller/","text":"controller \u00b6 Generates a controller Examples \u00b6 drush generate controller . Generates a controller Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"controller"},{"location":"generators/controller/#controller","text":"Generates a controller","title":"controller"},{"location":"generators/controller/#examples","text":"drush generate controller . Generates a controller","title":"Examples"},{"location":"generators/controller/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/controller/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/drush_alias-file/","text":"drush:alias-file \u00b6 Generates a Drush site alias file. Examples \u00b6 drush generate drush:alias-file . Generates a Drush site alias file. Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 daf","title":"drush:alias-file"},{"location":"generators/drush_alias-file/#drushalias-file","text":"Generates a Drush site alias file.","title":"drush:alias-file"},{"location":"generators/drush_alias-file/#examples","text":"drush generate drush:alias-file . Generates a Drush site alias file.","title":"Examples"},{"location":"generators/drush_alias-file/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/drush_alias-file/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/drush_alias-file/#aliases","text":"daf","title":"Aliases"},{"location":"generators/drush_command-file/","text":"drush:command-file \u00b6 Generates a Drush command file. Examples \u00b6 drush generate drush:command-file . Generates a Drush command file. Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 dcf","title":"drush:command-file"},{"location":"generators/drush_command-file/#drushcommand-file","text":"Generates a Drush command file.","title":"drush:command-file"},{"location":"generators/drush_command-file/#examples","text":"drush generate drush:command-file . Generates a Drush command file.","title":"Examples"},{"location":"generators/drush_command-file/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/drush_command-file/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/drush_command-file/#aliases","text":"dcf","title":"Aliases"},{"location":"generators/drush_testing-generator/","text":"drush:testing-generator \u00b6 An internal generator used for tests Examples \u00b6 drush generate drush:testing-generator . An internal generator used for tests Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"drush:testing-generator"},{"location":"generators/drush_testing-generator/#drushtesting-generator","text":"An internal generator used for tests","title":"drush:testing-generator"},{"location":"generators/drush_testing-generator/#examples","text":"drush generate drush:testing-generator . An internal generator used for tests","title":"Examples"},{"location":"generators/drush_testing-generator/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/drush_testing-generator/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/entity_bundle-class/","text":"entity:bundle-class \u00b6 11.x+ Generate a bundle class for a content entity. Examples \u00b6 drush generate entity:bundle-class . Generate a bundle class for a content entity. Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 entity-bundle-class","title":"entity:bundle-class"},{"location":"generators/entity_bundle-class/#entitybundle-class","text":"11.x+ Generate a bundle class for a content entity.","title":"entity:bundle-class"},{"location":"generators/entity_bundle-class/#examples","text":"drush generate entity:bundle-class . Generate a bundle class for a content entity.","title":"Examples"},{"location":"generators/entity_bundle-class/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/entity_bundle-class/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/entity_bundle-class/#aliases","text":"entity-bundle-class","title":"Aliases"},{"location":"generators/entity_configuration/","text":"entity:configuration \u00b6 Generates configuration entity Examples \u00b6 drush generate entity:configuration . Generates configuration entity Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 config-entity","title":"entity:configuration"},{"location":"generators/entity_configuration/#entityconfiguration","text":"Generates configuration entity","title":"entity:configuration"},{"location":"generators/entity_configuration/#examples","text":"drush generate entity:configuration . Generates configuration entity","title":"Examples"},{"location":"generators/entity_configuration/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/entity_configuration/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/entity_configuration/#aliases","text":"config-entity","title":"Aliases"},{"location":"generators/entity_content/","text":"entity:content \u00b6 Generates content entity Examples \u00b6 drush generate entity:content . Generates content entity Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 content-entity","title":"entity:content"},{"location":"generators/entity_content/#entitycontent","text":"Generates content entity","title":"entity:content"},{"location":"generators/entity_content/#examples","text":"drush generate entity:content . Generates content entity","title":"Examples"},{"location":"generators/entity_content/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/entity_content/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/entity_content/#aliases","text":"content-entity","title":"Aliases"},{"location":"generators/field/","text":"field \u00b6 Generates a field Examples \u00b6 drush generate field . Generates a field Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"field"},{"location":"generators/field/#field","text":"Generates a field","title":"field"},{"location":"generators/field/#examples","text":"drush generate field . Generates a field","title":"Examples"},{"location":"generators/field/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/field/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/form_config/","text":"form:config \u00b6 Generates a configuration form Examples \u00b6 drush generate form:config . Generates a configuration form Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 config-form","title":"form:config"},{"location":"generators/form_config/#formconfig","text":"Generates a configuration form","title":"form:config"},{"location":"generators/form_config/#examples","text":"drush generate form:config . Generates a configuration form","title":"Examples"},{"location":"generators/form_config/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/form_config/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/form_config/#aliases","text":"config-form","title":"Aliases"},{"location":"generators/form_confirm/","text":"form:confirm \u00b6 Generates a confirmation form Examples \u00b6 drush generate form:confirm . Generates a confirmation form Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 confirm-form","title":"form:confirm"},{"location":"generators/form_confirm/#formconfirm","text":"Generates a confirmation form","title":"form:confirm"},{"location":"generators/form_confirm/#examples","text":"drush generate form:confirm . Generates a confirmation form","title":"Examples"},{"location":"generators/form_confirm/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/form_confirm/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/form_confirm/#aliases","text":"confirm-form","title":"Aliases"},{"location":"generators/form_simple/","text":"form:simple \u00b6 Generates simple form Examples \u00b6 drush generate form:simple . Generates simple form Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 form","title":"form:simple"},{"location":"generators/form_simple/#formsimple","text":"Generates simple form","title":"form:simple"},{"location":"generators/form_simple/#examples","text":"drush generate form:simple . Generates simple form","title":"Examples"},{"location":"generators/form_simple/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/form_simple/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/form_simple/#aliases","text":"form","title":"Aliases"},{"location":"generators/hook/","text":"hook \u00b6 Generates a hook Examples \u00b6 drush generate hook . Generates a hook Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"hook"},{"location":"generators/hook/#hook","text":"Generates a hook","title":"hook"},{"location":"generators/hook/#examples","text":"drush generate hook . Generates a hook","title":"Examples"},{"location":"generators/hook/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/hook/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/install-file/","text":"install-file \u00b6 Generates an install file Examples \u00b6 drush generate install-file . Generates an install file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"install-file"},{"location":"generators/install-file/#install-file","text":"Generates an install file","title":"install-file"},{"location":"generators/install-file/#examples","text":"drush generate install-file . Generates an install file","title":"Examples"},{"location":"generators/install-file/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/install-file/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/javascript/","text":"javascript \u00b6 Generates Drupal JavaScript file Examples \u00b6 drush generate javascript . Generates Drupal JavaScript file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"javascript"},{"location":"generators/javascript/#javascript","text":"Generates Drupal JavaScript file","title":"javascript"},{"location":"generators/javascript/#examples","text":"drush generate javascript . Generates Drupal JavaScript file","title":"Examples"},{"location":"generators/javascript/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/javascript/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/layout/","text":"layout \u00b6 Generates a layout Examples \u00b6 drush generate layout . Generates a layout Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"layout"},{"location":"generators/layout/#layout","text":"Generates a layout","title":"layout"},{"location":"generators/layout/#examples","text":"drush generate layout . Generates a layout","title":"Examples"},{"location":"generators/layout/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/layout/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/migration/","text":"migration \u00b6 Generates the yml and PHP class for a Migration Examples \u00b6 drush generate migration . Generates the yml and PHP class for a Migration Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"migration"},{"location":"generators/migration/#migration","text":"Generates the yml and PHP class for a Migration","title":"migration"},{"location":"generators/migration/#examples","text":"drush generate migration . Generates the yml and PHP class for a Migration","title":"Examples"},{"location":"generators/migration/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/migration/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/misc_apache-virtual-host/","text":"misc:apache-virtual-host \u00b6 Generates an Apache site configuration file Examples \u00b6 drush generate misc:apache-virtual-host . Generates an Apache site configuration file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 apache-virtual-host","title":"misc:apache-virtual-host"},{"location":"generators/misc_apache-virtual-host/#miscapache-virtual-host","text":"Generates an Apache site configuration file","title":"misc:apache-virtual-host"},{"location":"generators/misc_apache-virtual-host/#examples","text":"drush generate misc:apache-virtual-host . Generates an Apache site configuration file","title":"Examples"},{"location":"generators/misc_apache-virtual-host/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/misc_apache-virtual-host/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/misc_apache-virtual-host/#aliases","text":"apache-virtual-host","title":"Aliases"},{"location":"generators/misc_html-page/","text":"misc:html-page \u00b6 Generates a simple html page Examples \u00b6 drush generate misc:html-page . Generates a simple html page Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 html-page","title":"misc:html-page"},{"location":"generators/misc_html-page/#mischtml-page","text":"Generates a simple html page","title":"misc:html-page"},{"location":"generators/misc_html-page/#examples","text":"drush generate misc:html-page . Generates a simple html page","title":"Examples"},{"location":"generators/misc_html-page/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/misc_html-page/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/misc_html-page/#aliases","text":"html-page","title":"Aliases"},{"location":"generators/misc_nginx-virtual-host/","text":"misc:nginx-virtual-host \u00b6 Generates an Nginx site configuration file Examples \u00b6 drush generate misc:nginx-virtual-host . Generates an Nginx site configuration file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 nginx-virtual-host","title":"misc:nginx-virtual-host"},{"location":"generators/misc_nginx-virtual-host/#miscnginx-virtual-host","text":"Generates an Nginx site configuration file","title":"misc:nginx-virtual-host"},{"location":"generators/misc_nginx-virtual-host/#examples","text":"drush generate misc:nginx-virtual-host . Generates an Nginx site configuration file","title":"Examples"},{"location":"generators/misc_nginx-virtual-host/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/misc_nginx-virtual-host/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/misc_nginx-virtual-host/#aliases","text":"nginx-virtual-host","title":"Aliases"},{"location":"generators/misc_project/","text":"misc:project \u00b6 Generates a composer project Examples \u00b6 drush generate misc:project . Generates a composer project Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 project","title":"misc:project"},{"location":"generators/misc_project/#miscproject","text":"Generates a composer project","title":"misc:project"},{"location":"generators/misc_project/#examples","text":"drush generate misc:project . Generates a composer project","title":"Examples"},{"location":"generators/misc_project/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/misc_project/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/misc_project/#aliases","text":"project","title":"Aliases"},{"location":"generators/module-file/","text":"module-file \u00b6 Generates a module file Examples \u00b6 drush generate module-file . Generates a module file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"module-file"},{"location":"generators/module-file/#module-file","text":"Generates a module file","title":"module-file"},{"location":"generators/module-file/#examples","text":"drush generate module-file . Generates a module file","title":"Examples"},{"location":"generators/module-file/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/module-file/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/module/","text":"module \u00b6 Generates Drupal module Examples \u00b6 drush generate module . Generates Drupal module Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"module"},{"location":"generators/module/#module","text":"Generates Drupal module","title":"module"},{"location":"generators/module/#examples","text":"drush generate module . Generates Drupal module","title":"Examples"},{"location":"generators/module/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/module/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/phpstorm-metadata/","text":"phpstorm-metadata \u00b6 Generates PhpStorm metadata Examples \u00b6 drush generate phpstorm-metadata . Generates PhpStorm metadata Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"phpstorm-metadata"},{"location":"generators/phpstorm-metadata/#phpstorm-metadata","text":"Generates PhpStorm metadata","title":"phpstorm-metadata"},{"location":"generators/phpstorm-metadata/#examples","text":"drush generate phpstorm-metadata . Generates PhpStorm metadata","title":"Examples"},{"location":"generators/phpstorm-metadata/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/phpstorm-metadata/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_action/","text":"plugin:action \u00b6 Generates action plugin Examples \u00b6 drush generate plugin:action . Generates action plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 action","title":"plugin:action"},{"location":"generators/plugin_action/#pluginaction","text":"Generates action plugin","title":"plugin:action"},{"location":"generators/plugin_action/#examples","text":"drush generate plugin:action . Generates action plugin","title":"Examples"},{"location":"generators/plugin_action/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_action/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_action/#aliases","text":"action","title":"Aliases"},{"location":"generators/plugin_block/","text":"plugin:block \u00b6 Generates block plugin Examples \u00b6 drush generate plugin:block . Generates block plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 block","title":"plugin:block"},{"location":"generators/plugin_block/#pluginblock","text":"Generates block plugin","title":"plugin:block"},{"location":"generators/plugin_block/#examples","text":"drush generate plugin:block . Generates block plugin","title":"Examples"},{"location":"generators/plugin_block/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_block/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_block/#aliases","text":"block","title":"Aliases"},{"location":"generators/plugin_ckeditor/","text":"plugin:ckeditor \u00b6 Generates CKEditor plugin Examples \u00b6 drush generate plugin:ckeditor . Generates CKEditor plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 ckeditor","title":"plugin:ckeditor"},{"location":"generators/plugin_ckeditor/#pluginckeditor","text":"Generates CKEditor plugin","title":"plugin:ckeditor"},{"location":"generators/plugin_ckeditor/#examples","text":"drush generate plugin:ckeditor . Generates CKEditor plugin","title":"Examples"},{"location":"generators/plugin_ckeditor/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_ckeditor/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_ckeditor/#aliases","text":"ckeditor","title":"Aliases"},{"location":"generators/plugin_condition/","text":"plugin:condition \u00b6 Generates condition plugin Examples \u00b6 drush generate plugin:condition . Generates condition plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 condition","title":"plugin:condition"},{"location":"generators/plugin_condition/#plugincondition","text":"Generates condition plugin","title":"plugin:condition"},{"location":"generators/plugin_condition/#examples","text":"drush generate plugin:condition . Generates condition plugin","title":"Examples"},{"location":"generators/plugin_condition/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_condition/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_condition/#aliases","text":"condition","title":"Aliases"},{"location":"generators/plugin_constraint/","text":"plugin:constraint \u00b6 Generates constraint plugin Examples \u00b6 drush generate plugin:constraint . Generates constraint plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 constraint","title":"plugin:constraint"},{"location":"generators/plugin_constraint/#pluginconstraint","text":"Generates constraint plugin","title":"plugin:constraint"},{"location":"generators/plugin_constraint/#examples","text":"drush generate plugin:constraint . Generates constraint plugin","title":"Examples"},{"location":"generators/plugin_constraint/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_constraint/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_constraint/#aliases","text":"constraint","title":"Aliases"},{"location":"generators/plugin_entity-reference-selection/","text":"plugin:entity-reference-selection \u00b6 Generates entity reference selection plugin Examples \u00b6 drush generate plugin:entity-reference-selection . Generates entity reference selection plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 entity-reference-selection","title":"plugin:entity-reference-selection"},{"location":"generators/plugin_entity-reference-selection/#pluginentity-reference-selection","text":"Generates entity reference selection plugin","title":"plugin:entity-reference-selection"},{"location":"generators/plugin_entity-reference-selection/#examples","text":"drush generate plugin:entity-reference-selection . Generates entity reference selection plugin","title":"Examples"},{"location":"generators/plugin_entity-reference-selection/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_entity-reference-selection/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_entity-reference-selection/#aliases","text":"entity-reference-selection","title":"Aliases"},{"location":"generators/plugin_field_formatter/","text":"plugin:field:formatter \u00b6 Generates field formatter plugin Examples \u00b6 drush generate plugin:field:formatter . Generates field formatter plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 field-formatter","title":"plugin:field:formatter"},{"location":"generators/plugin_field_formatter/#pluginfieldformatter","text":"Generates field formatter plugin","title":"plugin:field:formatter"},{"location":"generators/plugin_field_formatter/#examples","text":"drush generate plugin:field:formatter . Generates field formatter plugin","title":"Examples"},{"location":"generators/plugin_field_formatter/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_field_formatter/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_field_formatter/#aliases","text":"field-formatter","title":"Aliases"},{"location":"generators/plugin_field_type/","text":"plugin:field:type \u00b6 Generates field type plugin Examples \u00b6 drush generate plugin:field:type . Generates field type plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 field-type","title":"plugin:field:type"},{"location":"generators/plugin_field_type/#pluginfieldtype","text":"Generates field type plugin","title":"plugin:field:type"},{"location":"generators/plugin_field_type/#examples","text":"drush generate plugin:field:type . Generates field type plugin","title":"Examples"},{"location":"generators/plugin_field_type/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_field_type/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_field_type/#aliases","text":"field-type","title":"Aliases"},{"location":"generators/plugin_field_widget/","text":"plugin:field:widget \u00b6 Generates field widget plugin Examples \u00b6 drush generate plugin:field:widget . Generates field widget plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 field-widget","title":"plugin:field:widget"},{"location":"generators/plugin_field_widget/#pluginfieldwidget","text":"Generates field widget plugin","title":"plugin:field:widget"},{"location":"generators/plugin_field_widget/#examples","text":"drush generate plugin:field:widget . Generates field widget plugin","title":"Examples"},{"location":"generators/plugin_field_widget/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_field_widget/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_field_widget/#aliases","text":"field-widget","title":"Aliases"},{"location":"generators/plugin_filter/","text":"plugin:filter \u00b6 Generates filter plugin Examples \u00b6 drush generate plugin:filter . Generates filter plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 filter","title":"plugin:filter"},{"location":"generators/plugin_filter/#pluginfilter","text":"Generates filter plugin","title":"plugin:filter"},{"location":"generators/plugin_filter/#examples","text":"drush generate plugin:filter . Generates filter plugin","title":"Examples"},{"location":"generators/plugin_filter/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_filter/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_filter/#aliases","text":"filter","title":"Aliases"},{"location":"generators/plugin_manager/","text":"plugin:manager \u00b6 Generates plugin manager Examples \u00b6 drush generate plugin:manager . Generates plugin manager Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"plugin:manager"},{"location":"generators/plugin_manager/#pluginmanager","text":"Generates plugin manager","title":"plugin:manager"},{"location":"generators/plugin_manager/#examples","text":"drush generate plugin:manager . Generates plugin manager","title":"Examples"},{"location":"generators/plugin_manager/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_manager/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_menu-link/","text":"plugin:menu-link \u00b6 Generates menu-link plugin Examples \u00b6 drush generate plugin:menu-link . Generates menu-link plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 menu-link","title":"plugin:menu-link"},{"location":"generators/plugin_menu-link/#pluginmenu-link","text":"Generates menu-link plugin","title":"plugin:menu-link"},{"location":"generators/plugin_menu-link/#examples","text":"drush generate plugin:menu-link . Generates menu-link plugin","title":"Examples"},{"location":"generators/plugin_menu-link/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_menu-link/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_menu-link/#aliases","text":"menu-link","title":"Aliases"},{"location":"generators/plugin_migrate_destination/","text":"plugin:migrate:destination \u00b6 Generates migrate destination plugin Examples \u00b6 drush generate plugin:migrate:destination . Generates migrate destination plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 migrate-destination","title":"plugin:migrate:destination"},{"location":"generators/plugin_migrate_destination/#pluginmigratedestination","text":"Generates migrate destination plugin","title":"plugin:migrate:destination"},{"location":"generators/plugin_migrate_destination/#examples","text":"drush generate plugin:migrate:destination . Generates migrate destination plugin","title":"Examples"},{"location":"generators/plugin_migrate_destination/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_migrate_destination/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_migrate_destination/#aliases","text":"migrate-destination","title":"Aliases"},{"location":"generators/plugin_migrate_process/","text":"plugin:migrate:process \u00b6 Generates migrate process plugin Examples \u00b6 drush generate plugin:migrate:process . Generates migrate process plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 migrate-process","title":"plugin:migrate:process"},{"location":"generators/plugin_migrate_process/#pluginmigrateprocess","text":"Generates migrate process plugin","title":"plugin:migrate:process"},{"location":"generators/plugin_migrate_process/#examples","text":"drush generate plugin:migrate:process . Generates migrate process plugin","title":"Examples"},{"location":"generators/plugin_migrate_process/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_migrate_process/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_migrate_process/#aliases","text":"migrate-process","title":"Aliases"},{"location":"generators/plugin_migrate_source/","text":"plugin:migrate:source \u00b6 Generates migrate source plugin Examples \u00b6 drush generate plugin:migrate:source . Generates migrate source plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 migrate-source","title":"plugin:migrate:source"},{"location":"generators/plugin_migrate_source/#pluginmigratesource","text":"Generates migrate source plugin","title":"plugin:migrate:source"},{"location":"generators/plugin_migrate_source/#examples","text":"drush generate plugin:migrate:source . Generates migrate source plugin","title":"Examples"},{"location":"generators/plugin_migrate_source/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_migrate_source/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_migrate_source/#aliases","text":"migrate-source","title":"Aliases"},{"location":"generators/plugin_queue-worker/","text":"plugin:queue-worker \u00b6 Generates queue worker plugin Examples \u00b6 drush generate plugin:queue-worker . Generates queue worker plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 queue-worker","title":"plugin:queue-worker"},{"location":"generators/plugin_queue-worker/#pluginqueue-worker","text":"Generates queue worker plugin","title":"plugin:queue-worker"},{"location":"generators/plugin_queue-worker/#examples","text":"drush generate plugin:queue-worker . Generates queue worker plugin","title":"Examples"},{"location":"generators/plugin_queue-worker/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_queue-worker/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_queue-worker/#aliases","text":"queue-worker","title":"Aliases"},{"location":"generators/plugin_rest-resource/","text":"plugin:rest-resource \u00b6 Generates rest resource plugin Examples \u00b6 drush generate plugin:rest-resource . Generates rest resource plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 rest-resource","title":"plugin:rest-resource"},{"location":"generators/plugin_rest-resource/#pluginrest-resource","text":"Generates rest resource plugin","title":"plugin:rest-resource"},{"location":"generators/plugin_rest-resource/#examples","text":"drush generate plugin:rest-resource . Generates rest resource plugin","title":"Examples"},{"location":"generators/plugin_rest-resource/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_rest-resource/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_rest-resource/#aliases","text":"rest-resource","title":"Aliases"},{"location":"generators/plugin_views_argument-default/","text":"plugin:views:argument-default \u00b6 Generates views default argument plugin Examples \u00b6 drush generate plugin:views:argument-default . Generates views default argument plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 views-argument-default","title":"plugin:views:argument-default"},{"location":"generators/plugin_views_argument-default/#pluginviewsargument-default","text":"Generates views default argument plugin","title":"plugin:views:argument-default"},{"location":"generators/plugin_views_argument-default/#examples","text":"drush generate plugin:views:argument-default . Generates views default argument plugin","title":"Examples"},{"location":"generators/plugin_views_argument-default/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_views_argument-default/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_views_argument-default/#aliases","text":"views-argument-default","title":"Aliases"},{"location":"generators/plugin_views_field/","text":"plugin:views:field \u00b6 Generates views field plugin Examples \u00b6 drush generate plugin:views:field . Generates views field plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 views-field","title":"plugin:views:field"},{"location":"generators/plugin_views_field/#pluginviewsfield","text":"Generates views field plugin","title":"plugin:views:field"},{"location":"generators/plugin_views_field/#examples","text":"drush generate plugin:views:field . Generates views field plugin","title":"Examples"},{"location":"generators/plugin_views_field/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_views_field/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_views_field/#aliases","text":"views-field","title":"Aliases"},{"location":"generators/plugin_views_style/","text":"plugin:views:style \u00b6 Generates views style plugin Examples \u00b6 drush generate plugin:views:style . Generates views style plugin Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 views-style","title":"plugin:views:style"},{"location":"generators/plugin_views_style/#pluginviewsstyle","text":"Generates views style plugin","title":"plugin:views:style"},{"location":"generators/plugin_views_style/#examples","text":"drush generate plugin:views:style . Generates views style plugin","title":"Examples"},{"location":"generators/plugin_views_style/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/plugin_views_style/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/plugin_views_style/#aliases","text":"views-style","title":"Aliases"},{"location":"generators/render-element/","text":"render-element \u00b6 Generates Drupal render element Examples \u00b6 drush generate render-element . Generates Drupal render element Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"render-element"},{"location":"generators/render-element/#render-element","text":"Generates Drupal render element","title":"render-element"},{"location":"generators/render-element/#examples","text":"drush generate render-element . Generates Drupal render element","title":"Examples"},{"location":"generators/render-element/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/render-element/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service-provider/","text":"service-provider \u00b6 Generates a service provider Examples \u00b6 drush generate service-provider . Generates a service provider Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"service-provider"},{"location":"generators/service-provider/#service-provider","text":"Generates a service provider","title":"service-provider"},{"location":"generators/service-provider/#examples","text":"drush generate service-provider . Generates a service provider","title":"Examples"},{"location":"generators/service-provider/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/service-provider/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service_access-checker/","text":"service:access-checker \u00b6 Generates an access checker service Examples \u00b6 drush generate service:access-checker . Generates an access checker service Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 access-checker","title":"service:access-checker"},{"location":"generators/service_access-checker/#serviceaccess-checker","text":"Generates an access checker service","title":"service:access-checker"},{"location":"generators/service_access-checker/#examples","text":"drush generate service:access-checker . Generates an access checker service","title":"Examples"},{"location":"generators/service_access-checker/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/service_access-checker/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service_access-checker/#aliases","text":"access-checker","title":"Aliases"},{"location":"generators/service_breadcrumb-builder/","text":"service:breadcrumb-builder \u00b6 Generates a breadcrumb builder service Examples \u00b6 drush generate service:breadcrumb-builder . Generates a breadcrumb builder service Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 breadcrumb-builder","title":"service:breadcrumb-builder"},{"location":"generators/service_breadcrumb-builder/#servicebreadcrumb-builder","text":"Generates a breadcrumb builder service","title":"service:breadcrumb-builder"},{"location":"generators/service_breadcrumb-builder/#examples","text":"drush generate service:breadcrumb-builder . Generates a breadcrumb builder service","title":"Examples"},{"location":"generators/service_breadcrumb-builder/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/service_breadcrumb-builder/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service_breadcrumb-builder/#aliases","text":"breadcrumb-builder","title":"Aliases"},{"location":"generators/service_cache-context/","text":"service:cache-context \u00b6 Generates a cache context service Examples \u00b6 drush generate service:cache-context . Generates a cache context service Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 cache-context","title":"service:cache-context"},{"location":"generators/service_cache-context/#servicecache-context","text":"Generates a cache context service","title":"service:cache-context"},{"location":"generators/service_cache-context/#examples","text":"drush generate service:cache-context . Generates a cache context service","title":"Examples"},{"location":"generators/service_cache-context/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/service_cache-context/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service_cache-context/#aliases","text":"cache-context","title":"Aliases"},{"location":"generators/service_custom/","text":"service:custom \u00b6 Generates a custom Drupal service Examples \u00b6 drush generate service:custom . Generates a custom Drupal service Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 custom-service","title":"service:custom"},{"location":"generators/service_custom/#servicecustom","text":"Generates a custom Drupal service","title":"service:custom"},{"location":"generators/service_custom/#examples","text":"drush generate service:custom . Generates a custom Drupal service","title":"Examples"},{"location":"generators/service_custom/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/service_custom/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service_custom/#aliases","text":"custom-service","title":"Aliases"},{"location":"generators/service_event-subscriber/","text":"service:event-subscriber \u00b6 Generates an event subscriber Examples \u00b6 drush generate service:event-subscriber . Generates an event subscriber Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 event-subscriber","title":"service:event-subscriber"},{"location":"generators/service_event-subscriber/#serviceevent-subscriber","text":"Generates an event subscriber","title":"service:event-subscriber"},{"location":"generators/service_event-subscriber/#examples","text":"drush generate service:event-subscriber . Generates an event subscriber","title":"Examples"},{"location":"generators/service_event-subscriber/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/service_event-subscriber/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service_event-subscriber/#aliases","text":"event-subscriber","title":"Aliases"},{"location":"generators/service_logger/","text":"service:logger \u00b6 Generates a logger service Examples \u00b6 drush generate service:logger . Generates a logger service Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 logger","title":"service:logger"},{"location":"generators/service_logger/#servicelogger","text":"Generates a logger service","title":"service:logger"},{"location":"generators/service_logger/#examples","text":"drush generate service:logger . Generates a logger service","title":"Examples"},{"location":"generators/service_logger/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/service_logger/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service_logger/#aliases","text":"logger","title":"Aliases"},{"location":"generators/service_middleware/","text":"service:middleware \u00b6 Generates a middleware Examples \u00b6 drush generate service:middleware . Generates a middleware Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 middleware","title":"service:middleware"},{"location":"generators/service_middleware/#servicemiddleware","text":"Generates a middleware","title":"service:middleware"},{"location":"generators/service_middleware/#examples","text":"drush generate service:middleware . Generates a middleware","title":"Examples"},{"location":"generators/service_middleware/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/service_middleware/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service_middleware/#aliases","text":"middleware","title":"Aliases"},{"location":"generators/service_param-converter/","text":"service:param-converter \u00b6 Generates a param converter service Examples \u00b6 drush generate service:param-converter . Generates a param converter service Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 param-converter","title":"service:param-converter"},{"location":"generators/service_param-converter/#serviceparam-converter","text":"Generates a param converter service","title":"service:param-converter"},{"location":"generators/service_param-converter/#examples","text":"drush generate service:param-converter . Generates a param converter service","title":"Examples"},{"location":"generators/service_param-converter/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/service_param-converter/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service_param-converter/#aliases","text":"param-converter","title":"Aliases"},{"location":"generators/service_path-processor/","text":"service:path-processor \u00b6 Generates a path processor service Examples \u00b6 drush generate service:path-processor . Generates a path processor service Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 path-processor","title":"service:path-processor"},{"location":"generators/service_path-processor/#servicepath-processor","text":"Generates a path processor service","title":"service:path-processor"},{"location":"generators/service_path-processor/#examples","text":"drush generate service:path-processor . Generates a path processor service","title":"Examples"},{"location":"generators/service_path-processor/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/service_path-processor/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service_path-processor/#aliases","text":"path-processor","title":"Aliases"},{"location":"generators/service_request-policy/","text":"service:request-policy \u00b6 Generates a request policy service Examples \u00b6 drush generate service:request-policy . Generates a request policy service Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 request-policy","title":"service:request-policy"},{"location":"generators/service_request-policy/#servicerequest-policy","text":"Generates a request policy service","title":"service:request-policy"},{"location":"generators/service_request-policy/#examples","text":"drush generate service:request-policy . Generates a request policy service","title":"Examples"},{"location":"generators/service_request-policy/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/service_request-policy/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service_request-policy/#aliases","text":"request-policy","title":"Aliases"},{"location":"generators/service_response-policy/","text":"service:response-policy \u00b6 Generates a response policy service Examples \u00b6 drush generate service:response-policy . Generates a response policy service Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 response-policy","title":"service:response-policy"},{"location":"generators/service_response-policy/#serviceresponse-policy","text":"Generates a response policy service","title":"service:response-policy"},{"location":"generators/service_response-policy/#examples","text":"drush generate service:response-policy . Generates a response policy service","title":"Examples"},{"location":"generators/service_response-policy/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/service_response-policy/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service_response-policy/#aliases","text":"response-policy","title":"Aliases"},{"location":"generators/service_route-subscriber/","text":"service:route-subscriber \u00b6 Generates a route subscriber Examples \u00b6 drush generate service:route-subscriber . Generates a route subscriber Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 route-subscriber","title":"service:route-subscriber"},{"location":"generators/service_route-subscriber/#serviceroute-subscriber","text":"Generates a route subscriber","title":"service:route-subscriber"},{"location":"generators/service_route-subscriber/#examples","text":"drush generate service:route-subscriber . Generates a route subscriber","title":"Examples"},{"location":"generators/service_route-subscriber/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/service_route-subscriber/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service_route-subscriber/#aliases","text":"route-subscriber","title":"Aliases"},{"location":"generators/service_theme-negotiator/","text":"service:theme-negotiator \u00b6 Generates a theme negotiator Examples \u00b6 drush generate service:theme-negotiator . Generates a theme negotiator Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 theme-negotiator","title":"service:theme-negotiator"},{"location":"generators/service_theme-negotiator/#servicetheme-negotiator","text":"Generates a theme negotiator","title":"service:theme-negotiator"},{"location":"generators/service_theme-negotiator/#examples","text":"drush generate service:theme-negotiator . Generates a theme negotiator","title":"Examples"},{"location":"generators/service_theme-negotiator/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/service_theme-negotiator/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service_theme-negotiator/#aliases","text":"theme-negotiator","title":"Aliases"},{"location":"generators/service_twig-extension/","text":"service:twig-extension \u00b6 Generates Twig extension service Examples \u00b6 drush generate service:twig-extension . Generates Twig extension service Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 twig-extension","title":"service:twig-extension"},{"location":"generators/service_twig-extension/#servicetwig-extension","text":"Generates Twig extension service","title":"service:twig-extension"},{"location":"generators/service_twig-extension/#examples","text":"drush generate service:twig-extension . Generates Twig extension service","title":"Examples"},{"location":"generators/service_twig-extension/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/service_twig-extension/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service_twig-extension/#aliases","text":"twig-extension","title":"Aliases"},{"location":"generators/service_uninstall-validator/","text":"service:uninstall-validator \u00b6 Generates a uninstall validator service Examples \u00b6 drush generate service:uninstall-validator . Generates a uninstall validator service Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 uninstall-validator","title":"service:uninstall-validator"},{"location":"generators/service_uninstall-validator/#serviceuninstall-validator","text":"Generates a uninstall validator service","title":"service:uninstall-validator"},{"location":"generators/service_uninstall-validator/#examples","text":"drush generate service:uninstall-validator . Generates a uninstall validator service","title":"Examples"},{"location":"generators/service_uninstall-validator/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/service_uninstall-validator/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/service_uninstall-validator/#aliases","text":"uninstall-validator","title":"Aliases"},{"location":"generators/test_browser/","text":"test:browser \u00b6 Generates a browser based test Examples \u00b6 drush generate test:browser . Generates a browser based test Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 browser-test","title":"test:browser"},{"location":"generators/test_browser/#testbrowser","text":"Generates a browser based test","title":"test:browser"},{"location":"generators/test_browser/#examples","text":"drush generate test:browser . Generates a browser based test","title":"Examples"},{"location":"generators/test_browser/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/test_browser/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/test_browser/#aliases","text":"browser-test","title":"Aliases"},{"location":"generators/test_kernel/","text":"test:kernel \u00b6 Generates a kernel based test Examples \u00b6 drush generate test:kernel . Generates a kernel based test Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 kernel-test","title":"test:kernel"},{"location":"generators/test_kernel/#testkernel","text":"Generates a kernel based test","title":"test:kernel"},{"location":"generators/test_kernel/#examples","text":"drush generate test:kernel . Generates a kernel based test","title":"Examples"},{"location":"generators/test_kernel/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/test_kernel/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/test_kernel/#aliases","text":"kernel-test","title":"Aliases"},{"location":"generators/test_nightwatch/","text":"test:nightwatch \u00b6 Generates a nightwatch test Examples \u00b6 drush generate test:nightwatch . Generates a nightwatch test Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 nightwatch-test","title":"test:nightwatch"},{"location":"generators/test_nightwatch/#testnightwatch","text":"Generates a nightwatch test","title":"test:nightwatch"},{"location":"generators/test_nightwatch/#examples","text":"drush generate test:nightwatch . Generates a nightwatch test","title":"Examples"},{"location":"generators/test_nightwatch/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/test_nightwatch/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/test_nightwatch/#aliases","text":"nightwatch-test","title":"Aliases"},{"location":"generators/test_unit/","text":"test:unit \u00b6 Generates a unit test Examples \u00b6 drush generate test:unit . Generates a unit test Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 unit-test","title":"test:unit"},{"location":"generators/test_unit/#testunit","text":"Generates a unit test","title":"test:unit"},{"location":"generators/test_unit/#examples","text":"drush generate test:unit . Generates a unit test","title":"Examples"},{"location":"generators/test_unit/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/test_unit/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/test_unit/#aliases","text":"unit-test","title":"Aliases"},{"location":"generators/test_webdriver/","text":"test:webdriver \u00b6 Generates a test that supports JavaScript Examples \u00b6 drush generate test:webdriver . Generates a test that supports JavaScript Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 webdriver-test","title":"test:webdriver"},{"location":"generators/test_webdriver/#testwebdriver","text":"Generates a test that supports JavaScript","title":"test:webdriver"},{"location":"generators/test_webdriver/#examples","text":"drush generate test:webdriver . Generates a test that supports JavaScript","title":"Examples"},{"location":"generators/test_webdriver/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/test_webdriver/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/test_webdriver/#aliases","text":"webdriver-test","title":"Aliases"},{"location":"generators/theme/","text":"theme \u00b6 Generates Drupal theme Examples \u00b6 drush generate theme . Generates Drupal theme Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"theme"},{"location":"generators/theme/#theme","text":"Generates Drupal theme","title":"theme"},{"location":"generators/theme/#examples","text":"drush generate theme . Generates Drupal theme","title":"Examples"},{"location":"generators/theme/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/theme/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/theme_file/","text":"theme:file \u00b6 Generates a theme file Examples \u00b6 drush generate theme:file . Generates a theme file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"theme:file"},{"location":"generators/theme_file/#themefile","text":"Generates a theme file","title":"theme:file"},{"location":"generators/theme_file/#examples","text":"drush generate theme:file . Generates a theme file","title":"Examples"},{"location":"generators/theme_file/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/theme_file/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/theme_settings/","text":"theme:settings \u00b6 Generates Drupal theme-settings.php file Examples \u00b6 drush generate theme:settings . Generates Drupal theme-settings.php file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators)","title":"theme:settings"},{"location":"generators/theme_settings/#themesettings","text":"Generates Drupal theme-settings.php file","title":"theme:settings"},{"location":"generators/theme_settings/#examples","text":"drush generate theme:settings . Generates Drupal theme-settings.php file","title":"Examples"},{"location":"generators/theme_settings/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/theme_settings/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/yml_breakpoints/","text":"yml:breakpoints \u00b6 Generates a breakpoints yml file Examples \u00b6 drush generate yml:breakpoints . Generates a breakpoints yml file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 breakpoints","title":"yml:breakpoints"},{"location":"generators/yml_breakpoints/#ymlbreakpoints","text":"Generates a breakpoints yml file","title":"yml:breakpoints"},{"location":"generators/yml_breakpoints/#examples","text":"drush generate yml:breakpoints . Generates a breakpoints yml file","title":"Examples"},{"location":"generators/yml_breakpoints/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/yml_breakpoints/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/yml_breakpoints/#aliases","text":"breakpoints","title":"Aliases"},{"location":"generators/yml_links_action/","text":"yml:links:action \u00b6 Generates a links.action yml file Examples \u00b6 drush generate yml:links:action . Generates a links.action yml file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 action-links","title":"yml:links:action"},{"location":"generators/yml_links_action/#ymllinksaction","text":"Generates a links.action yml file","title":"yml:links:action"},{"location":"generators/yml_links_action/#examples","text":"drush generate yml:links:action . Generates a links.action yml file","title":"Examples"},{"location":"generators/yml_links_action/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/yml_links_action/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/yml_links_action/#aliases","text":"action-links","title":"Aliases"},{"location":"generators/yml_links_contextual/","text":"yml:links:contextual \u00b6 Generates links.contextual yml file Examples \u00b6 drush generate yml:links:contextual . Generates links.contextual yml file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 contextual-links","title":"yml:links:contextual"},{"location":"generators/yml_links_contextual/#ymllinkscontextual","text":"Generates links.contextual yml file","title":"yml:links:contextual"},{"location":"generators/yml_links_contextual/#examples","text":"drush generate yml:links:contextual . Generates links.contextual yml file","title":"Examples"},{"location":"generators/yml_links_contextual/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/yml_links_contextual/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/yml_links_contextual/#aliases","text":"contextual-links","title":"Aliases"},{"location":"generators/yml_links_menu/","text":"yml:links:menu \u00b6 Generates a links.menu yml file Examples \u00b6 drush generate yml:links:menu . Generates a links.menu yml file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 menu-links","title":"yml:links:menu"},{"location":"generators/yml_links_menu/#ymllinksmenu","text":"Generates a links.menu yml file","title":"yml:links:menu"},{"location":"generators/yml_links_menu/#examples","text":"drush generate yml:links:menu . Generates a links.menu yml file","title":"Examples"},{"location":"generators/yml_links_menu/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/yml_links_menu/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/yml_links_menu/#aliases","text":"menu-links","title":"Aliases"},{"location":"generators/yml_links_task/","text":"yml:links:task \u00b6 Generates a links.task yml file Examples \u00b6 drush generate yml:links:task . Generates a links.task yml file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 task-links","title":"yml:links:task"},{"location":"generators/yml_links_task/#ymllinkstask","text":"Generates a links.task yml file","title":"yml:links:task"},{"location":"generators/yml_links_task/#examples","text":"drush generate yml:links:task . Generates a links.task yml file","title":"Examples"},{"location":"generators/yml_links_task/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/yml_links_task/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/yml_links_task/#aliases","text":"task-links","title":"Aliases"},{"location":"generators/yml_module-info/","text":"yml:module-info \u00b6 Generates a module info yml file Examples \u00b6 drush generate yml:module-info . Generates a module info yml file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 module-info","title":"yml:module-info"},{"location":"generators/yml_module-info/#ymlmodule-info","text":"Generates a module info yml file","title":"yml:module-info"},{"location":"generators/yml_module-info/#examples","text":"drush generate yml:module-info . Generates a module info yml file","title":"Examples"},{"location":"generators/yml_module-info/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/yml_module-info/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/yml_module-info/#aliases","text":"module-info","title":"Aliases"},{"location":"generators/yml_module-libraries/","text":"yml:module-libraries \u00b6 Generates module libraries yml file Examples \u00b6 drush generate yml:module-libraries . Generates module libraries yml file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 module-libraries","title":"yml:module-libraries"},{"location":"generators/yml_module-libraries/#ymlmodule-libraries","text":"Generates module libraries yml file","title":"yml:module-libraries"},{"location":"generators/yml_module-libraries/#examples","text":"drush generate yml:module-libraries . Generates module libraries yml file","title":"Examples"},{"location":"generators/yml_module-libraries/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/yml_module-libraries/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/yml_module-libraries/#aliases","text":"module-libraries","title":"Aliases"},{"location":"generators/yml_permissions/","text":"yml:permissions \u00b6 Generates a permissions yml file Examples \u00b6 drush generate yml:permissions . Generates a permissions yml file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 permissions","title":"yml:permissions"},{"location":"generators/yml_permissions/#ymlpermissions","text":"Generates a permissions yml file","title":"yml:permissions"},{"location":"generators/yml_permissions/#examples","text":"drush generate yml:permissions . Generates a permissions yml file","title":"Examples"},{"location":"generators/yml_permissions/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/yml_permissions/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/yml_permissions/#aliases","text":"permissions","title":"Aliases"},{"location":"generators/yml_routing/","text":"yml:routing \u00b6 Generates a routing yml file Examples \u00b6 drush generate yml:routing . Generates a routing yml file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 routing","title":"yml:routing"},{"location":"generators/yml_routing/#ymlrouting","text":"Generates a routing yml file","title":"yml:routing"},{"location":"generators/yml_routing/#examples","text":"drush generate yml:routing . Generates a routing yml file","title":"Examples"},{"location":"generators/yml_routing/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/yml_routing/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/yml_routing/#aliases","text":"routing","title":"Aliases"},{"location":"generators/yml_services/","text":"yml:services \u00b6 Generates a services yml file Examples \u00b6 drush generate yml:services . Generates a services yml file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 services","title":"yml:services"},{"location":"generators/yml_services/#ymlservices","text":"Generates a services yml file","title":"yml:services"},{"location":"generators/yml_services/#examples","text":"drush generate yml:services . Generates a services yml file","title":"Examples"},{"location":"generators/yml_services/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/yml_services/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/yml_services/#aliases","text":"services","title":"Aliases"},{"location":"generators/yml_theme-info/","text":"yml:theme-info \u00b6 Generates a theme info yml file Examples \u00b6 drush generate yml:theme-info . Generates a theme info yml file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 theme-info","title":"yml:theme-info"},{"location":"generators/yml_theme-info/#ymltheme-info","text":"Generates a theme info yml file","title":"yml:theme-info"},{"location":"generators/yml_theme-info/#examples","text":"drush generate yml:theme-info . Generates a theme info yml file","title":"Examples"},{"location":"generators/yml_theme-info/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/yml_theme-info/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/yml_theme-info/#aliases","text":"theme-info","title":"Aliases"},{"location":"generators/yml_theme-libraries/","text":"yml:theme-libraries \u00b6 Generates theme libraries yml file Examples \u00b6 drush generate yml:theme-libraries . Generates theme libraries yml file Options \u00b6 --answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 theme-libraries","title":"yml:theme-libraries"},{"location":"generators/yml_theme-libraries/#ymltheme-libraries","text":"Generates theme libraries yml file","title":"yml:theme-libraries"},{"location":"generators/yml_theme-libraries/#examples","text":"drush generate yml:theme-libraries . Generates theme libraries yml file","title":"Examples"},{"location":"generators/yml_theme-libraries/#options","text":"--answer=ANSWER . Answer to generator question. --destination=DESTINATION . Absolute path to a base directory for file writing. --dry-run . Output the generated code but not save it to file system.","title":"Options"},{"location":"generators/yml_theme-libraries/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"generators/yml_theme-libraries/#aliases","text":"theme-libraries","title":"Aliases"}]}